/*
 * 	1. 변수 ==> 여러개 (배열, 클래스)1
 * 		=> 식별자 : 변수명 설정을 잘 해야 함 ==> 대소문자 구분. Name != name
 * 		=> 약속 (문법) ==> 리팩토링 (클래스 명, 변수 명을 변경하는 작업)
 * 		   ----------
 * 			1. 클래스, 인터페이스 명은 대문자로 시작한다.
 * 				class main인 경우 
 * 				=> main main = new main 이기 때문에 클래스인지 객체인지 알기 어려움 =====> Class Main  ====> Main main = new Main
 * 				=> 웹에서는 한글이 깨지기 때문에 알파벳 이름을 사용하는 것이 좋다.
 * 				=> 두 개의 단어를 이용할 때는 (대문자, _)를 사용한다.
 * 				=> MainClass / File_name
 * 
 * 			2. 변수, 메서드 = 소문자 시작
 * 			3. 상수 = 모든 알파벳이 대문자 
 * 		=> 데이터 1개만 저장하는 메모리 공간
 * 		=> 데이터형 (정수, 실수, 문자. 논리)
 * 					 |    	|	 | 	   | true / false
 * 					 |		|	 | char (2byte) => 양수 (0 ~ 65535)
 * 					 |		|	 | ----- String (문자열을 지정하는 데이터명) ========>	웹에서는 가장 많이 사용함	====> 무조건 문자열 전송 ==> 1을 전송해도 문자열
 * 					 |		| double (8 byte) = 소수점 15자리														  <input type = "text"> --- 정수가 아님.				
 * 					 | int (4 byte) / long  (8byte) / byte (1byte) ===> 저장 크기
 * 	-------------------------------
 * 	2. 연산자 : 요청 처리 => 변수를 가공한다.
 * 		단항연산자
 * 			=> 증감 연산자 	(++, --)
 * 			=> 형변환 연산자 (type)
 * 			=> 부정연산자 	(!)
 * 
 * 		이항연산자
 * 			=> 산술연산자 (=, -, *, /, %)
 * 			=> 비교연산자 (==, !=, <, >, <=, >=)
 * 			=> 논리연산자 (&&, ||)
 * 			=> 대입연산자 (=, +=, -=)
 * 
 * 		삼항연산자 
 * 			=> (조건) ? 값 : 값 ==> if ~ else ==> 웹, 게임 (소스를 줄이는 경우)
 * 
 * 	3. 제어문 : 프로그램 자체 제어
 * 				=> 필요한 내용만 출력 (건너뛴다) => 조건문
 * 				=> 소스가 반복적일 경우		   => 반복문
 * 				=> 반복문에 제어 => 반복문 종료, 반복문에서 제외
 * 
 * 			1)조건문
 * 				= 단일 조건문
 * 					=> 조건에 맞는 경우에만 출력
 * 						if (조건문) => true / false => 부정연산자, 비교연산자, 논리연산자 {
 * 							true => 문장을 수행
 * 						}   false => 건너 뛴다
 * 						  ** 여러개 사용시에는 독립으로 사용이 된다 => 모든 조건을 검색
 * 
 * 				= 선택 조건문
 * 					=> true / false 경우 나눠서 처리 => 웹, 윈도우에서 가장 많이 사용
 * 						=> 로그인 시 성공 => main
 * 									실패 => 로그인 요청 화면, 회원가입 화면
 * 						if (isLogin()) {
 * 							main.jsp 이동
 * 						} else {
 * 							login.jsp 이동
 * 						}
 * 
 * 				= 다중 조건문 => 해당 조건에 맞는 문장만 1개 수행
 * 					if (조건) {			=> true => 수행 => 종료
 * 								| false
 * 					} else if (조건) {	=> true => 수행 => 종료
 * 								| false
 * 					} else {
 * 							조건이 없는 경우 처리되는 문장 => 필요가 없는 경우 생략이 가능하다.
 *                  }
 * 					=> 다중 조건문을 간결허게 만든 제어문 => 선택문 ====> switch case
 * 															=> 게임 => key 입력 값
 * 															=> 웹	=> 범위 지정 (예약, 체크, 금액 ... 등)
 * 					switch (문자, 정수, 문자열)
 * 						   char , int / long, String
 * 					{
 * 						case Enter : 값이 1일 경우
 * 							처리 문장
 * 							break;
 * 						case space :
 * 							처리 문장
 * 						default :
 * 							다른 키를 설정
 * 					}
 * 					=> 메뉴 => 1개 선택 => 윈도우 창 => 네트워크
 * 					=> 조건문
 * 			
 * 			2) 반복문 for / while / do while
 * 					 ------------
 * 				for 	: 반복 횟수가 존재 => 화면 UI => 15 ~ 20
 * 							=> 페이징 기법 (인라인 뷰)
 * 							=> 가장 많이 사용되는 반복문
 * 					형식)
 * 						for (초기값; 조건식; 증감식) {
 * 							실행 문장
 * 						}
 * 						for (int i = 1; i <= 3; i++) {
 * 							문장
 * 						}
 * 						
 * 				while	: 무한 반복 (반복 횟수를 모르는 경우)
 * 							=> 서버 프로그램 (Back - End)
 * 							=> 파일 읽기 / 데이터베이스 빅데이터 (챗봇)
 * 					형식)
 * 						초기 값	-------------------------- 1
 * 											| false ==>	종료
 * 						while (조건식) {
 * 							반복 실행 문장
 * 							증감식
 * 						}
 * 					=> 한 번도 실행하지 못할 수도 있다 => 보완 한 것이 do ~ while
 * 
 * 				do while: 조건이 나중에 검색되어 반드시 한 번 이상은 수행한다.
 * 							=> 사용 빈도는 거의 없다
 * 						형식)
 * 							초기값	---------------- 1
 * 							do {			
 * 								반복 수행 문장	---- 2
 * 								증감식			---- 3
 * 							} while (조건식) {	---- 4
 * 							}
 * 
 * 			3) 반복 제어문 : break, continue
 * 							----- 	------- 반복문에서만 사용한다.
 * 							| 제어문을 종료할 때 사용한다. => 반복문, 선택문
 * 
 * 							for (int i = 1; i <= 5; i++) {
 * 								if (i == 3) continue;		=====> 3에서 증감식으로 이동하여 출력은 1, 2, 4, 5가 된다.		===> 3번만 제외
 * 							} 
 * 							
 * 							for (int i = 3; i <= 5; i++ (
 * 								if (i == 3) break;			=====> 3에서 빠져나와 출력은 1, 2가 된다.
 * 							}
 * 							
 * 							while (조건문)
 * 								  ------ ====> continue를 잘못 사용하면 무한 루프가 될 수 있다.
 * 							int i = 1;
 * 						
 * 							while (i <= 5) {
 * 								if (i == 3) continue;	==> 무한 루프 (while이 true일 때 자주 사용)
 * 								sysout(i);
 * 								i++
 * 							}
 * 							
 * 
 * 	---------=> 한개의 기능 설정 = 메소드
 *  ---------=> 통합된 기능 설정 = 클래스
 *  
 *  클래스 :  데이터면 / 통합
 *  					=> 웹 출력 (브라우저 : HTML)
 *  
 * 
 */
public class 자바제어문_1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		System.out.println("======= for - break 반복문 중단");

		for (int i = 1; i <= 5; i++) {
			if (i == 3)
				System.out.println("i = " + i);
		}
		System.out.println("==================while===========================");
	
		int i = 1;
		
		while (i <= 3) {
			if (i == 3) break;
		i++;
		} 
		System.out.println("i = " + i);
		
	}

}
