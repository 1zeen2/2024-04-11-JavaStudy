package com.sist.main;

import com.sist.vo.*;
/*
 * 	접근 지정어
 * 	----------------------------------------------------
 *		종류 	
 * 	----------------------------------------------------
 * 		private
 * 	----------------------------------------------------
 * 		defialt
 * 	-------------- --------------------------------------
 * 	]	protecedd 
 * 
 * 
 * 
 * 	----------------------------------------------------
 * 	
 * 	----------------------------------------------------
 * 	
 */
/*	변수
 * 	-----------------------------------------------------------------------------------------------------------------------------------------
 * 		종류										메모리에 저장되는 시점 		사용 범위			 메모리 해제 			  저장 위치
 * ------------------------------------------------------------------------------------------------------------------------------------------
 * 인스턴스 변수										new 클래스 명()			클래스 전체			프로그램 종료 시				Heap
 * class A {									=> 메모리 따로 저장		=> 다른 클래스도 가능		
 * 
 * 		int a;
 * 		int b;
 * 		double d;
 * 		static int d;
 * 	}
 * 	------------------- new 사용 시 메모리 크기
 * 		=> A는 사용자 정의 데이터 형
 * 		   -----------------------
 * 			| 16 byte => static은 제외
 * 		=> A aa = new A();
 * 			---- aa ----
 * 				0x100
 * 			------------	0x100	---------
 * 									 0 => a
 * 									---------
 * 									 0 => b
 * 									---------
 * 									 0.0 => c
 * 									---------
 * 
 * 
 * 
 * 	[접근 지정어] 데이터형 변수명;
 * 
 *  ------------------------------------------------------------------------------------------------------------------------------------------------
 *  정적 변수	(static)								컴파일 시에 메모리에 저장 			자신의 클래스 전체	프로그램시 해제		MethodArea
 *  class A {											접근 방식 : 클래스 명. 변수 명.		=> 다른 클래스
 *  	[접근 지정어] static 데이터 형 변수 명;			new없이 저장이 가능하다
 *  	클래스 블럭 안에서만 선언기 가능
 *  		=> 다른 클래스에서 사용이 가능
 *   }
 *   ** 모든 클래스가 공유할 수 있다. (공개) => 메모리 공간 1개만 생성
 *  ---------------------------------------------------
 *  	-------- 사무실
 *  	시계
 *  	달력
 *  	게시판
 *  	--------- 공동 사물 ==> static
 *  	개인 PC
 *  	개인 책상
 *  	개인 사물함
 *  	---------- ==> 인스턴스
 *  
 *  	자바에 사용하는 매모리
 *  	-------------------
 *  	Method Area ==> 메서드, static 변수
 *  	-------------------
 *  	Stack 		==> 지역 변수, 매개 변수	=> 메모리 자체에서 관리 => 메서드가 종료 되면 자동으로 사라진다
 *  					------------------ 메서드 안에서 사용이 가능하다
 *  	-------------------
 *  	Heap		==> 배열, 클래스 멤버 변수
 *  	-------------------
 *  		1. int malloc(sizeof(A)), 2. free (A)
 *  			메모리 할당하는 메서드	메모리 해제하는 메서드
 *  		==> new라는 연산자로 변경		delete ===> 사라짐
 *  		==> 프로그래머가 삭제에 소홀 : 프로그램을 종료하면 자동으로 사라지기 때문에 따로 손대지 않고 운영 체제에서 삭제
 *  		==> 변수가 많아지면서 문제 발생 => 가비지 컬렉션 (자동 메모리 회수)
 *  										 -----------
 *  										=> 회수할 때 프로그램 종료시 쯤 회수
 *  										=> 멀티 미디어같은 경우는 데이터가 커서 직접 지움 => System.gc
 *  ---------------------------------------------------
 *  지역 변수
 *  void display() {	=> LIFO (Last In First Out)
 *  					=====> a => b => c => c => b => a => 순으로 만들고 사라짐
 *  	int a = 10; {
 *  		int b = 20 {
 *  			int c = 30;
 *  		}
 *  	}
 *  }
 *  
 *  void display {
 *  	
 *  	데이터형 변수명;
 *  		=> 메서드 안에 사용
 *  		=> 접근 지정어를 사용할 수 없다.
 *  		=> static 을 사용할 수 없다.
 *  		=> 유일하게 사용이 가능한 것은 ===> final
 *  		=> 다른 클래스에서 사용이 불가능하다
 *  			=> 메서드 블럭 안에서만 사용이 가능하다
 *  }
 *  	*** 멤버 변수(static, 인스턴스 변수(객체 변수))
 *  		=> 자동 초기화 
 *  			int a = 0
 *  			double => 0.0
 *  			String(클래스) => null
 *  							 ----- 실제 저장된 데이터의 주소가 없는 상태
 *  			boolean = false
 *  		지역 변수는 자동으로 초기화가 되지 않는다
 *  ----------------------------------------------------------------------------------------------------
 *  * 변수
 *  	저장하는 데이터가 여러 개	=> 따로 메모리를 만들어서 저장 (인스턴스)
 *  	저장하는 데이터가 한 개 	=>
 *  	저장하는 데이터가 
 *  
 *  
 *  ---------------------------------------------------
 *  
 *  ---------------------------------------------------
 *  
 */

public class MainClass {

}
