/*
 *	자바에서 지원하는 제어문
 * 		=> 프로그램의 흐름
 * 			= 건너뛴다 / 실행한다
 * 				조건문 
 * 			= 여러 개 반복 => 반복문
 * 				반복문
 * 			= 필요한 부분 선택
 * 				선택문
 * 			= 반복에서 나간다
 * 			--------------	게임 ESC
 * 				반복 제어문
 * 	자바에서 코딩
 * 	평문 / 조건문 / 반복문
 * 	1. 조건문
 * 		단일조건문
 * 				|	===>	부정연산자, 비교연산자, 논리연산자만 사용이 가능하다	===>	true와 false만 나와야 하기 때문에
 * 			if(조건문)
 * 			{
 * 				조건이 true일 경우에 수행 -> false면 skip
 * 			}
 * 		선택조건문
 * 			if(조건문)
 * 			{
 * 				실행 문장		===> 조건문이 true		===>	id / pwd 일치		=>	log in 
 * 			}
 * 				else
 * 			{
 * 				실행 문장		===> 조건문이 false	===>	id / pwd 불일치	=>	id, pwd 확인 메시지 출력.
 * 			}
 * 		다중조건문
 * 			if(조건문)
 * 			{
 * 				=>	 true면 문장을 수행		=>	종료
 * 				=> 	false면 밑에 있는 조건문으로 이동
 * 			}
 * 				else if(조건문)
 * 				{
 * 					=> 	true면 문장을 수행		=>	종료
 * 					=> 	false면 밑에 있는 조건문으로 이동
 * 				}
 * 				else if(조건문)
 * 				{
 * 					=> 	true면 문장을 수행		=>	종료
 * 					=> 	false면 밑에 있는 조건문으로 이동
 * 				}
 * 			else
 * 			{
 * 				=>	 해당 조건이 없는 경우 수헹	=>	생략이 가능하다
 * 			}
 * 
 * 			***	중첩
 * 			if(조건문)
 * 			{
 * 				if(조건문)
 * 				{
 * 							======> if(조건 && 조건)으로 대체가 가능하다.
 * 				}
 * 			}
 * 
 * 
 * 		***	모든 제어문은 바로 밑에 있는 문장만 제어할 수 있다.
 * 		예)
 * 			if(조건문)
 * 				문장 1	==> if문이 제어한 가능한 문장.
 * 				문장 2	==>	if문에 영향을 받지 않는 일반 문장.
 * 			문장 2개를 동시에 제어하려면 한 블록(지역) 안에 2개의 문장을 전부 넣어줘야 한다
 * 
 * 	2. 선택문
 * 		switch ~ case
 * 	3. 반복문
 * 		for			:	반복 횟수가 지정된 경우	=>	10번 반복
 * 		while		:	반복 횟수가 없는 경우		=>	서버, 게임, 데이터베이스 연동
 * 		do ~ while	:	반드시 한 번 이상 수행	=>	
 * 	4. 반복 제어문
 * 		break		=>	반복 수행을 종료할 때 사용
 * 		continue	=>	특정 부분을 제외할 때 사용
 * 
 * 
 * 
 */
public class 제어문_1 {
	
	public static void main(String[] args) {
		
		// 한 개의 점수를 받아 60점 이상이면 합격 / 60점 이하면 탈락
		int score = (int)(Math.random() * 101);
		System.out.println(score >= 60 ? "합격" : "불합격");
/*		
		if(score >= 60) {
			System.out.println("축하드립니다. 합격입니다.");
		}
		if(score < 60) {
			System.out.println("불합격 입니다.");
		}
*/		
		
	}
}
