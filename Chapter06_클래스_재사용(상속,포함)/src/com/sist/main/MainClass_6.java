package com.sist.main;
/*
 * 	상속
 * 		= 키워드 : extends
 * 		= 객체 생성
 * 		  --------
 * 		  하위 클래스 = 하위 클래스 => 상위 클래스를 확장하기 위해
 * 		  class A
 * 		  class B extends A
 * 			   ---
 * 			B b = new B();
 * 			-------------- 가장 많음
 * 
 * 			A a = new B();
 * 			-------------- 두 번째로 많음
 * 			리턴 값이 라이브러리라면 => 형변환을 해주어야 한다
 * 
 * 		= 상속 => 상속을 내리는 클래스는 공통성이 많다.
 * 			class Music
 * 				=>	목록 보여주기 / 순위 보여주기 / 음반 구매하기 / 포인트 ...
 * 			class Genie extend Music
 * 					목록 보여주기 / 순위 보여주기 / 음반 구매하기 / 포인트 ... ==> + 추가 / 수정
 * 			class Melon extend Music
 * 					목록 보여주기 / 순위 보여주기 / 음반 구매하기 / 포인트 ... ==> + 추가 / 수정
 * 			class Mnet extend Music
 * 					목록 보여주기 / 순위 보여주기 / 음반 구매하기 / 포인트 ... ==> + 추가 / 수정
 * 																				 ----   ----
 * 																				  |       |
 * 																		    오버 로딩 / 오버 라이딩
 * 		1. 데이터를 보호한다. (캡슐화)
 * 		2. 기존의 클래스를 재사용한다. (상속)
 * 		3. 추가, 수정이 가능하게 만든다. (다형성 ==> 오버 로딩, 오버 라이딩)
 * 		----------------------------------------------------------------
 * 			객체 지향의 3대 특성 ==> 캡슐화, 상속, 다형성.
 */	
public class MainClass_6 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
