package com.sist.main;
/*
 * 	객체 지향 프로그램
 * 	----------------
 * 		1) 데이터 보호 => 캡슐화
 * 			데이터 은닉화 / 메서드를 통해 접근이 가능
 * 			  private	/		getter/setter
 * 
 * 		2) 상속 => 기존의 클래스를 재사용
 * 				상속		/		포함
 * 				 |				 |=> 있는 그대로 사용 ==> 사용 빈도가 많다.
 * 				 |=> 변경해서 사용
 * 					=> 메모리 누수 현상
 * 						상위 클래스 메모리 할당 => 하위 클래스 메모리 할당 : 메모리 사용이 많다
 * 						상위 클래스에 맞게 사용 => 제약이 많다
 * 						결합성이 높아지는 단점이 있다.
 * 						-------------------- 수정 시에 다른 클래스에 영향을 많이 미친다.
 * 		=> 윈도우 프로그램 작성 시에는 : 상속을 많이 사용.
 * 		=> 웹 프로그램 : 상속이 거의 없음.
 * 
 * 		3) 다형성(오버로딩, 오버라이딩)
 	* 	   ----- --------  --------- 모든 내용이 동일해야 한다 (리턴형, 매개 변수, 메서드 명, 접근 지정어)
 * 			 |		|=> 메서드 명만 동일
 * 		   	 |=> 다형성 == 여러 형태 (같은 매서드 명으로 다른 기능을 제작)
 * 
 * 			=> 새로운 기능 추가 : 오버로딩
 * 			=> 기존의 기능 변경 : 오버라이딩
 * 			=> 오버 로딩 / 오버 라이딩 =>
 * 				 new		modify
 * 	--------------------------------- 객체 지향의 3대 특성 (권장) => 재사용, 수정, 추가 => 유지보수
 * 		1. 클래스 구성 요소
 * 			클래스 : 설계
 * 					= 필요한 데이터 추출 => 변수
 * 					  -----------------
 * 					= 기능 추출 => 메서드
 * 					  --------
 * 					= 필요시에는 초기화 => 생성자 (생략이 가능)
 * 
 * 			메모리에 저장 => 인스턴스 => new
 * 				|
 * 			   사용	=> 객체 => new 로부터 생성된다.
 * 					   ----
 * 						|=> 관련된 데이터와 메서드를 관리하는 메모리 영역 (변수 => 데이터 값을 관리한다)
 * 							------------------------------------------
 * 							define 은 중요하지 않는다.
 * 			class ClassName {
 * 					클래스 영역에서는 제어문, 연산 처리, 값을 다시 대입하는 것이 불가능하다.
 * 					---------- 선언, 선언과 동시에 값 대입만 가능하다.
 * 				---------------------------------------
 * 					변수
 * 						= 인스턴스 변수 (중심) ===> 멤버 변수 ===> Heap
 * 						  ------------ 메모리 영역을 만들어서 저장
 * 									   -------------------- new 연산자.
 * 										=> 따로 저장하는 메모리 공간을 만든다.
 * 										=> 클래스는 1개에 대한 정보 설정.
 * 
 * 						= static 변수 ==> 공통 변수 ==> Method Area => 메모리가 1개만 생성
 * 						  ---------- 컴파일러에 의해 생성
 * 						  ---------- 접근 시에는 클래스 명. 변수 명 
 * 				---------------------------------------
 * 					메서드 : 변수 활용
 * 							 --------
 * 				---------------------------------------
 * 					초기화 => 데이터 베이스 / 파일 읽기 / 크롤링
 * 							  -------------------------------
 * 							  => 생성자 / static block
 * 				---------------------------------------
 * 
 * 			}
 * 			=> new 연산자 => 메모리에 변수 / 메서드가 동시에 저장
 * 
 * 
 */
public class Chapter06_정리 {

	public static void main(String[] args) {


	}

}
