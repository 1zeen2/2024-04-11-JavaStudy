package com.sist.main;
/*
 * 	1. 클래스의 구성 요소
 * 		데이터 + 기능 
 * 		-----	---- 
 * 		|		|=> 멤버 메서드
 * 		|=> 멤버 변수
 * 			-------- 초기화 (값을 지정) : 초기화 블럭 / 생성자
 * 													  -----
 * 		데이터										
 * 		----- 클래스에서는 다른 데이터 형을 모아서 관리 / 전송 (브라우저, 윈도우) => 한 번에 모아서 전송
 * 	--------------------------------------------------------------------------------------------------------
 * 				인스턴스 변수 : new 를 사용할 때 마다 메모리에 따로 저장되는 변수				
 * 				정적 변수 : 컴파일러에 의해서 자동으로 저장되는 변수 : 메모리 공간 1개. (모든 클래스에서 공유)
 * 					1) 자동으로 기본 초기화
 * 						int, long = 0, double = 0.0, boolean = false, class = null
 * 						----------------------------------------------------------
 * 						사용 가능
 * 						-------- 기본형, 클래스, 배열
 * 	-------------------------------------------------------------------------------------------------------- 다른 클래스 안에서도 사용이 가능하다. (프로그램 종료 시 까지 유지된다)
 * 				지역 변수 : 메서드 안에서만 사용이 가능한 변수
 * 							=> 지역 변수, 매개 변수
 * 							=> 루프 변수, 임시 변수
 * 			------------------------------------------------------------------------------------------------ 메서드가 종료가 되면 자동으로 사라지는 변수.
 * 							** 변수의 초기화가 없다. (반드시 초기화 후에 사용해야 한다)
 * 				객체 생성 시 호출해야되는 메서드 : 생성자
 * 					생성자는 필요시에만 사용한다
 * 					** 멤버 변수, 정적 변수, 메서드, 생성자 => 필요한 것만 골라서 사용이 가능하다.
 * 					   --------------------------------- 구성 요소는 반드시 다 사용해야만 하는 것은 아니다.	
 * 
 * 	 			생성자는 변수에 대한 초기화가 필요할 때 사용한다.
 * 					= 시작과 동시에 동작하는 내용
 * 				---------------------------------------------- 웹에서 많이 사용된다.(DB 연동, 자동 로그인, 화면 UI, cookie 읽기, 권한 부여, 등 ...)
 * 				생성자
 * 				----- 여러 개 사용이 가능하다. 없는 경우도 있다. (컴파일러가 자동으로 생성 = 매개 변수가 없는 생성자 = default 생성자)
 * 					=> 상속의 예외 조건.
 * 					=> 클래스 명과 동일하다.
 * 					=> return 형이 없다
 * 					=> 객체 생성 시에 호출되는 메서드 
 * 					=> 다른 클래스에서도 사용이 가능하다 => public
 * 					=> 여러 개가 있는 경우 => 오버 로딩 (중복 함수 정의) => 같은 이름의 메서드를 여러 개 만드는 것.
 * 						=> 메서드가 동일하고, 매개 변수의 개수, 데이터 타입이 다르다.
 * 						=> return 타입, 접근 지정어는 관련이 없다.
 * 	
 * 				메서드
 * 				-----
 * 			***	인스턴스 메서드 : new에 의해 따로 저장 
 * 				공통 메서드 : static
 * 				------------------- 접근 지정어 => public (다른 클래스와 연결)
 * 				형식)
 * 					public 리턴 형 메서드 명(매개 변수 ...)
 * 						   ------			------------ 사용자가 요청한 내용	 => id, pwd, 마우스 클릭, 버튼 클릭, ...
 * 					{		 |=> 사용자 요청 처리 결과 => 목록 / 상세 보기 / 총 페이지 / ...
 * 													  	 [] /   클래스
 * 						구현 ...
 * 						결과 값 전송
 * 						-----------
 * 						(return)
 * 					}
 * 					*** 메서드는 호출 시 마다 처음부터 실행 후 원래 호출된 위치로 돌아온다.
 * 								------------------------	 --------------
 * 					*** 메서드 사용 이유
 * 						=> 반복 제거 (반복적인 코딩)
 * 									 ------------- 1. 반복문이 가능한가? / 2. 메서드 처리가 가능한가? 순으로 처리한다. => 코드의 간소화.
 * 
 * 						=> 관련된 명령문을 모아서 관리.	=> 가독성이 좋다. (구조화 된 프로그램) => 기능을 분리.
 * 						   ------------ 입력 / 출력
 * 						
 * 						=> 재사용 (수정, 추가)
 * 					
 * 					=> 호출
 * 						멤버 변수 / 메서드
 * 						인스턴스
 * 							객체 명. 변수 명 / 객체 명.메서드 명
 * 						static
 * 							클래스 명. 변수 명 / 클래스 명. 메서드 명
 * 
 * 					*** 사용법 (코딩)
 * 						변수 => 인스턴스 변수
 * 								데이터 보호 => private 변수, 다른 클래스에서 연결
 * 												변수의 기능 설정 => public getter / setter => 캡슐화
 * 						메서드 => 인스턴스 메서드
 * 									다른 클래스와 연결 => public
 * 
 * 						생성자 => 필요 시에만 사용한다 => 자동으로 추가 : public
 * 									웹사이트 => 변수 추출 / 기능 추출 => 메뉴, 요구 사항 분석
 * 						어떤 데이터를 보여줄지 / 데이터를 보여주기 위해 어떤 기능을 설정할지
 * 						--------------------	--------------------------------
 * 							   멤버 변수						멤버 메서드
 * 						시작과 동시에 어떤 화면을 보여줄지
 * 						-------------------------------
 * 									생성자
 * 
 */			

public class MainClass_2 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
