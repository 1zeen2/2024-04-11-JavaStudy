package com.sist.main;
/*
 * 	객체 지향 프로그램
 * 		=> 변수 설정
 * 			=> 저장할 내용이 여러 개 => new 인스턴스 변수
 * 			=> 한 개 저장 => static
 * 
 * 		=> 메서드 형식 => 처리 과정
 * 		   ----- 연산자 / 제어문
 * 		
 * 		=> 초기화 : 생성자, static{}
 * 
 * 	상속 => 재사용	=======================================>> 개념 이해
 * 		=> 변경 (오버라이딩)
 * 		=> 상속 => 호출 되는 과정
 * 		=> 메모리 할당 (상위, 하위)
 * 		=> 형 변환
 * 
 * 	추상 클래스 / 인터페이스	===============================>> 완벽한 숙지 ===> 인터페이스 기반 상속 (다중 상속)
 * 
 * 	예외 처리	===========================================>> 완벽한 숙지 (상속 기반이기 때문에 개념을 잘 이해해야 함)
 * 	------------------------------ Java 의 기본 문법
 * 	라이브러리 => 조립
 * 		=> 컬렉션
 * 
 * ** 오라클 연동 / JSP / Spring / Spring-Boot
 * 		MyBatis / JPA / 
 * 	  ---------------------------------------- Java 기반
 * 	Java / JavaScript / Spring
 * 	-------------------------- 이 3가지를 잘 이해해야 함
 * 
 * 	상속	=> 확장된 클래스 (extends)
 * 		=> 멤버 변수, 메서드
 * 						|=> 변경
 * 		=> 형식
 * 			class A extends B => 단일 상속, 재사용
 * 
 * 		=> 단일 상속
 * 			
 * 			동물		==> 남자는 인간이다. 인간은 동물이다. 
 * 			 |		===> '이다.'의 개념 (is - a)
 * 			인간		====> 공통점이 많이 존재한다. ==> 상속을 내리는 클래스는 를래스마다 공통점을 가지고 있다.
 * 			 |										 ----- 확장
 * 		---------						
 * 		|		|	
 * 	   남자	   여자	
 * 
 * 			A								A			B
 * 		   ---							   ---		   ---
 * 			|								|			|	
 * 		---------		==> 단일 상속		-------------	===> 다중 상속. (클래스에는 존재하지 않고, 인터페이스에만 있는 개념이다.)
 * 		|		|								  |
 * 	    B		C								  C
 * 			A
 * 			|
 * 			B
 * 
 * 	확장
 * 	---- 변경해서 사용 => 오버 라이딩 (변수 오버 라이딩, 메서드 오버 라이딩)
 * 	---- 추가해서 사용 => 오버 로딩 
 * 	
 * 		추가					변경(수정)
 * 				오버 로딩				오버 라이딩
 * 	-----------------------------------------------
 * 	상태			같은 클래스 내에서만		상속이 된 상태
 * 				 가능					** 악명의 클래스 => 사
 * 	------------------------------------------------
 * 	메서드 명	  동일						동일
 * 	------------------------------------------------
 * 	매개 변수	개수 / 데이터 형		개수나 데이터 동일
 * 				    다름
 * 	------------------------------------------------
 * 	리턴 형		관계 없다					동일
 * 	------------------------------------------------
 * 	접근 지정어	관계 없다			축소할 수 없다
 * 									확대는 가능하다
 * 	------------------------------------------------
 * 		접근 지정어				 	축소
 * 						<-------------------- 
 * 			=> private	=>	default	=>	protected => public
 *\							----------------->>
 * 								확대
 * 	------------------------------------------------
 * 		class A {
 * 			void display(){} 
 *   	}
 *   bublic sa[o
 *   	 
 * 
 * 
 * 
 * 
 * 
 */
class parent {
		String name;	


		
}
public class MainClass_7 {

	public static void main(String[] args) {
		
	}

}
