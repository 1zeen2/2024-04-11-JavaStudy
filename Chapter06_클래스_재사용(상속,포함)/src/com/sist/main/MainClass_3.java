package com.sist.main;
/*
 * 	상속
 * 		1) 단일 상속만 가능하다.
 * 		2) extends : 확장을 시킨 클래스 (extends = 확장하다)
 * 		3) 이미 제작된 클래스를 이용하기 때문에 신뢰성이 좋다.
 * 		4) 소스를 줄일 수 있지만 / 가독성은 떨어진다.
 * 			=> 가상으로 상속되었다고 가정 ...
 * 		
 * 		class A {
 * 			int a;
 * 			int b;
 * 			int c;
 * 			public void dispaly() {}
 * 		}
 * 		class B extends A {
 * 			=> 아무 것도 없어보이지만 class A의 멤버 변수, 메서드가 안에 들어있다. int a, b, c, display()
 * 		}
 * 		B bb = new B();
 * 		
 * 		---- bb ----
 * 			0x100
 * 		------------	0x100	----------------------
 * 									 --- super ---
 * 									 ----- a -----
 * 									 ----- b -----
 * 									 ----- c -----
 * 									 -- display()--
 * 								----------------------
 * 									 --- this ---
 * 									---- bbb() ----
 * 									---------------
 * 								----------------------
 * 								bb 라는 객체를 통해서 접근이 가능하다
 * 								==> 상속이 안된다.
 * 									1. 생성자
 * 									2. 초기화 블럭
 * 									3. private	: 상속은 되지만 => 접근이 불가능하다
 * 										=> protected
 * 									4. static	: 상속은 안되지만 => 공통으로 사용이 가능하게 만들어준다.
 * 
 * 									class Super
 * 									class Sub extends Super
 * 			
 * 										Super
 * 										  ↑ (상속 기호)
 * 										 Sub
 * 									----------- 클래스의 크기 비교는 반드시 상속 / 포함
 * 
 * 									class A {
 * 										int a, b, c, d, e;
 * 									}
 * 									class B {
 * 										int k;
 * 									}
 * 									---------- A > B (X) ==> 크기를 비교할 수 없다. (데이터나 변수가 많다고 클래스의 크기가 더 큰 것이 아니다.
 * 															 ---- 상속 / 포함으로만 크기 비교가 가능하다.
 * 									class A {
 * 										int a;
 * 										int b;
 * 									}
 * 									class B extends A {
 * 										(int a, int b)
 * 										int c;
 * 									}
 * 									---------- A > B ===> class B가 변수는 3개로 더 많지만 상속을 내리는 A 클래스의 크기가 더 크다 (is - a)
 * 
 * 									동물
 * 									 |
 * 							-----------------
 * 							|		|		|
 * 						  포유류	  양서류   조류
 * 							|
 * 					-----------------
 * 					|		|		|
 * 				   인간     말      소
 * 					|
 * 				---------
 * 				|		|
 * 			  남자	   여자	
 * 
 * 							==> '이다.'라는 과정을 거쳐야 상속이라 할 수 있음 ==> 남자는 인간'이다'. ==> 인간은 포유류 '이다.' ===> 포유류는 동물 '이다.'
 * 								==> 상속을 내리는 클래스가 크다.
 * 							==> 남자와 여자, 인간과 말과 소는 크기를 비교할 수 없다. ==> 상속을 받지 않았기 때문에.
 * 			인간 = 남자
 * 			인간 = 여자
 * 
 * 			남자 = (남자)인간
 * 			여자 = (여자)인간
 * 			---------------- 클래스에도 크기가 있다. (형변환)
 * 			** 자바는 모든 클래스 (사용자 정의, 라이브러리)의 상속을 내리는 클래스가 있다. (최상위 클래스) ==> Object
 * 				=> Object 가 가지고 있는 모든 기능을 사용할 수 있다.
 * 				=> Object 는 모든 데이터 형의 상위 클래스이다.
 * 				   ----- 기본형 / 모든 클래스를 받을 수 있다. (배열까지)
 * 
 * 					Object = 10;
 * 					o = 10. 51;
 * 					o = "aaa";
 * 					o = 'A';
 * 					o = new A()
 * 					------------ 배열 => 데이터 형 여러 개 첨부가 가능하다.
 * 					전부 다 가능.
 * 
 * 					Object[] obj = {"", 10.7, 10, 'A', new A()}; => 다른 데이터 형을 모아서 관리할 수 있다.
 * 
 * 	
 * 
 * 
 * 
 * 					
 */

public class MainClass_3 extends Object {	// Object 의 모든 내용을 MainClass_3이 상속받음
					//	 -------------- 생략이 가능하다
	/*
	 * 	생략이 가능한 코드
	 * 	-----------------
	 * 	1. import java.lang.*; => String, Math, StringBuffer ... 자주 사용하기 때문에 생략이 가능하게끔 만들어짐.
	 * 	2. extends Object => 생략이 된다.
	 * 	3. 생성자 => 필요 없는 경우 생략이 가능하다 => 자동으로 컴파일러가 default 형으로 추가.
	 * 	4. void 메서드에서 return 을 생략할 수 있다. => 자동으로 컴파일러가 return; 추가.
	 * 	5. 모든 클래스는 예외 처리를 해야 한다.
	 * 	   ---------------------------------
	 * 		컴파일시				실행시
	 * 		-------				----- 예외 처리 생략이 가능
	 * 	반드시 예외 처리				  --------------------
	 * 								  사용자 입력 값을 받아 봐야 알 수 있다. => 정상적으로 입력이 될 수도, 아닐 수도 있기 때문애. ==> 조건문으로 제어
	 * 								  정수 입력 : 정수를 입력할 수도 있고 ====> 사용자가 실수, 문자 등을 입력할 수도 있음
	 * 
	 * 	=> 상속
	 * 
	 */
	public MainClass_3() {
		
	}

	public static void main(String[] args) { 
		// TODO Auto-generated method stub

	}

}
