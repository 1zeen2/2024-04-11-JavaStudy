/*
 * 	프로그램 => 묶음(관련된 내용을 묶어서 재사용)
 * 	-----
 * 	데이터 관리	명령문 관리	출력 관리
 * 	--------	--------	------- 애플리케이션 / 웹 애플리케이션 / 모바일 ...
 * 				1) 연산자
 * 				2) 제어문
 * 				-------- 묶어서 관리 (메서드)
 * 				메서드 => 결과 값 도출, 어떤 값을 받을지
 * 						---------	------------
 * 						  return	  parameter
 * 						------------------------
 * 						  호출 위치를 잘 파악해야 함
 * 						  ------- + 라이브러리 사용
 * 	1)	한 개씩 저장 후 관리
 * 	  	----- *변수 / 상수
 * 	2)	여러 개 동시에 저장 후 관리
 * 		----- 배열 / 클래스
 * 		배열	 : 같은 데이터 형을 묶어서 관리
 * 		*클래스 : 다른 데이터 형을 묶어서 관리
 * 		------------------------------ 메모리에 저장 (RAM => 프로그램 종료 시 사라진다)
 * 	3) 	영구적인 저장 장치
 * 		-------------
 * 		= 파일 : 보안에 취약하다는 단점이 있다
 * 		= *** 오라클 (RDBMS)
 * 	=> 자바 + 오라클
 * 		|	(데이터 저장)
 * 	데이터를 읽어서 => 브라우저로 보냄
 * 	--------------------------
 * 	
 * 	브라우저 (자바는 일반 텍스트)		자바							오라클
 * 	------						---
 * 	HTML / CSS / JavaScript		HTML / 오라클 연결이 가능하다
 * 	=> 오라클을 연결할 수 없다.
 * 
 * 	ASP는 	=> 오라클을 연동해야 하고 => C# 언어를 사용한다.
 * 	DJango는	=> 오라클을 연동해야 하고 => 파이썬을 사용한다.
 * 	------------------------------------------------
 * 	자바는 => 데이터 관리를 해주어야 한다
 * 			---------	메모리에 저장
 * 					  	------
 * 						=> 어디까지 저장 기간인지 모름
 * 							=> 지역 변수 : 메서드 종료와 동시에 사라진다 => 종료 전에 데이터를 넘겨주어야 함
 * 								=> 리턴형 / 매개 변수를 잘 사용해야 한다
 * 							=> 전역 변수 : 프로그램 종료 시 까지 데이터 유지
 * 								=> 클래스 안에 있는 모든 메서드가 메모리를 공유할 수 있다는 장점이 있다.
 * 														  -----------
 *	----------------------------------------------------------------------------------------------
 *	자바는 => 클래스로 시작해서 => 클래스로 끝난다.
 *	구성 요소
 *	class ClassName {
 *	---------------------
 *		변수 설정 : 전역 변수 => 자동으로 초기화되는 변수
 *		static int a; => 0값으로 초기화. => 클래스 모든 영역에서 사용이 가능
 *										=> 다른 클래스에서도 사용이 가능하다
 *	---------------------
 *		생성자
 *	---------------------
 *		static void display1() {
 *			변수 => 블럭변수이기 때문에 display1() 안에서만 사용이 가능하다
 * 		}
 *		static void display2() {
 *			변수 => 블럭변수이기 때문에 display2() 안에서만 사용이 가능하다
 * 		}
 *	---------------------
 *	값을 계속 유지하는 변수 ..... 멤버 변수로 잡아주어야 함 (전역 변수)
 *	사용 후 버려야 하는 변수 .... 지역 변수로 잡아준다
 *	}
 *
 * 	===> 클래스 구성 제장
 * 		 ------------
 * 		1. 데이터 보호 : 캡슐화
 * 		2. 재사용	: 상속
 * 		3. 수정, 추가 : 다형성 (오버라이딩, 오버로딩)
 * 		------------------ 객체 지향의 3대 특성
 * 
 * 		클래스의 종류
 * 		---------
 * 		일반 클래스 / 추상 / 인터페이스 / 내부 클렛 / 익명의 클래스 / 지역 클래스 / 멤버 클래스 
 * 
 * 		프로그램이 종료하지 않게 하는 방식(비종료): 예외 처리
 * 
 * 	====> 라이브러리
 * 
 */
/*	1. package => 한 번만 사용이 가능
 * 		import	java.util.*;
 * 				---------- 패키지
 *	
 *		import ....
 *		class는 한 개의 대한 정보
 *		--------------------
 *	2.  class ClassName {
 *		----------------
 *			변수 목록
 *			-------
 *				지역 변수
 *				---------전역 변수
 *				멤버 변수	: 각각 따로 변수 => new 저장 (새로운 메모리에 저장)
 *				공유 변수	: static => 자동 메모리 할당
 *				-------
 *		--------------- 
 *			생성자
 *		---------------
 *			메서드 {
 *				변수 목록 ...
 *			}
 *		main()
 */
public class 메서드_1 {

	public static void main(String[] args) {
		

	}

}
