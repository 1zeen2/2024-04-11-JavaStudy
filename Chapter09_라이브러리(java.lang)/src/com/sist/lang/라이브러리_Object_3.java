package com.sist.lang;
/*
 * 	복제	=> clone();
 * 		=> Object 는 모든 데이터 형을 받을 수 있다.
 * 		=> Java 에는 대부분이 리턴 형과 매개 변수가 => Object 이다.
 * 		=> 클래스 여러 개를 묶어서 관리 (Object)
 * 
 * 	class A
 * 	class B
 * 	class C
 * 	
 * 	A a = new A();
 * 	B b = new B();
 * 	C c = new C();
 * 
 * 	Object[] arr = {new A(), new B(), new C()};
 * 		=> 한 개의 이름으로 어떻게 제어할 것 인가...
 * 	
 * 	=> 변수 / 메서드
 * 			데이터를 활용
 * 
 * 	데이터 관리
 * 	---------------
 * 	메서드는 기능 처리 : 연산 처리, 제어문
 * 						--------------- 묶어서 사용
 * 
 * 	class ClassName {
 * 		화면 출력 (관리 대상) 데이터 모으기 => 저장하는 공간 : 변수
 * 			=> 벤치마킹
 * 			=> 한 개만 변수 : 로그 => static
 * 			=> 여러 개 따로 저장 : 메모리를 따로 만들어서 저장 => 인스턴스
 * 								  ------------------------ 인스턴스
 * 								 		명령어 => new
 * 	----------------------------------
 * 	초기화 : 데이터를 저장 => 생성자
 * 				=> 기본 데이터를 저장 => 디폴트 생성자
 * 				=> 값을 받아서 저장 => 매개 변수가 있는 생성자
 * 				=> 생성자는 여러 개 필요할 때도 있다.
 * 				   -------------------------------- Overloading
 * 					=> 중복 함수 정의 ==> 같은 이름으로 제작
 * 					=> 메서드 명이 동일해야 한다.
 * 					=> 매개 변수를 다르게 만든다 (개수, 데이터 형)
 * 					=> 리턴 형과 접근 지정어는 관련이 없다.
 * 				
 * 				=> 생성자
 * 					=> 클래스 명이 동일해야 한다.
 * 					=> 리턴 형이 없다.
 * 					=> 필요 시에만 생성한다 => 없는 경우에는 컴파일러가 자동으로 추가. (매개 변수가 없는 디폴트 생성자)
 * 
 * 				*** 시작과 동시에 처리해야 하는 경우
 * 						=> 화면 UI / 자동 로그인 / 서버 연결 / 데이터베이스 연결
 * 				*** 데이터베이스에서 읽어서 주로 처리
 * 					------------------------------
 * 					메서드 : 기능 처리
 * 							=> 목록 출력, 페이지나누기, 상세 보기, 예약, 결제, ...
 * 							=> 다른 클래스와 연결해서 사용
 * 							=> 접근 지정어는 public ==> 다른 클래스와 연결하여 사용할 수 있게 해주어야 하기 때문에
 * 								리턴 형 / 매개 변수
 * 								------------------
 * 								메서드 => 프로그램마다 기능은 동일 => 처리가 다르다
 * 									=> 추상 클래스 / 인터페이스
 * 									   ---------------------- 카페
 * 					영화
 * 					 => 상영 영화 출력
 * 					 => 상영 예정작 출력
 * 					 => 상세 보기
 * 					 => 예매 기능
 * 						--------				
 * 													
 * 				=> 클래스 제작이 가능하다면	==> 개발 (공기업 / 금융권 / 학교 / 차세대 개발이 많음)
 * 					=> 에러에 대한 사전 대비			  ----- 정처기 반드시 필요. (Spring 주로 사용)
 * 					=> 비정상 종료가 없는 프로그램
 * 					   ------------------------- 예외 처리 (견고성)
 * 					=> 속도 (최적화)
 * 					=> 가독성 (유지보수) => 표준화 => 인터페이스 (Spring, MyBatis, JPA, VueJs,React)
 * 					=> 틀은 동일하다 => 분석이 쉬움
 * 
 * 				=> 예외 복구 =>  try ~ catch(복구)
 * 				   ------------------------------ 대부분 사용한다.
 * 					예외 회피 => 알림 => throws => 복구는 불가능하다.
 * 		
 * 				=> 살을 붙이기 시작
 * 				   --------------- 라이브러리 (사용자가 만들지 못하는 기능을 제공한다)
 * 				   자바 => 거의 모든 내용이 만들어져 있다. (라이브러리 찾기에 따라 실력이 나뉨)
 * 				   -----------------------------------------------------------------------
 * 					|=> 조립식 프로그램 (CBD)
 * 						  |=> 자바 개발자의 단점은 라이브러리가 없는 경우에는 조립을 못하는 경우가 많다.
 * 
 * 				=> C/C++ : 개발자
 * 				=> Java	 : 프로그래머 
 * 				=> 스프링에서 Kotlin을 지원하기도 한다.
 * 
 * 
 */
class Card {
	
}
public class 라이브러리_Object_3 {

	public static void main(String[] args) {
		System.out.printf("%d %s %c %f", 10, "aaa", 'A', 10.7);
	}

}