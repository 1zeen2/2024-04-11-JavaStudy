//1. 다음 중 배열 선언이 잘못된 것은?

public class 배열문제_1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
/*
 *  int[] n = {1, 2, 3, 4, 5};
 *  int n[] = {0};
 *  int[] n = new int[3];
 *  int n[3] = new int[3];
 * 
 * 배열 => 변수 여러 개 모아서 한 개 이름으로 제어
 * 							 ----------
 * 							 변수 => 인덱스 번호로 구분한다
 * 		=> 고정적 => 데이터 추가, 데이터 삭제 불가능
 * 			=> 선언한 개수만큼만 사용이 가능하다
 * 				** 개수를 늘리는 경우 : 더 많이 저장이 가능한 큰 새로운 배열을 하나 선언해야 한다.
 * 					=> 데이터 복사 후 사용 arraycopy(), for ....
 * 
 * 		=> 인덱스를 이용하기 때문에 제어문 사용이 편리하다
 * 			=> 인덱스는 0번부터 순차적으로 되어있다.
 * 
 * 		=> 선언
 * 			데이터형[] 배열명 ;	===> 권장 사용.
 * 			데이터형 배열명 [];
 * 			------- 맞는 데이터만 첨부 => 같은 데이터형을 모은다, 사용 용도가 같아야 한다
 * 			예) 이미지, 제목, 조회수 ..... => 인덱스 번호만 참조하면 쉽게 용도에 따라 사용이 가능하다. (인덱스에 이미지 제목 조회수 전부 섞이면 사용이 어려움)
 * 
 * 		=> 초기화
 * 			배열명 = new 데이터형[]{} => 초기화
 * 			선언과 동시에 초기화
 * 			데이터형[] 배열명 = {값1, 값2, 값3, ...}
 * 			데이터형[] 배열명 = new  데이터형[개수] => 임의로 초기화(자동 초기화)
 * 
 * 		=> 배열의 개수 확인
 * 		   배열명.length
 * 
 * 		=> 배열 한개씩 사용
 * 		   배열명[인덱스] = 값
 * 		   읽기 : 배열명[인덱스]
 * 				  ------------ 일반 변수와 동일시
 * 			int a = 10, b = 10, c = 30;
 * 			----------
 * 				10		===> a
 * 			----------
 * 				10		===> b	=====> 주소의 위치를 알 수 없기 때문에 변수명 a , b, c, 를 호출하여 사용
 * 			----------
 * 				30		===> c
 * 			----------
 * 
 * 			int[] arr = {10, 20, 30}
 * 
 * 			arr ----------> -------------------------
 * 								10		10		30
 * 							-------------------------
 * 							  arr[0]   arr[1]  arr[2]
 * 							-------------------------
 * 								|       |        |
 * 								a       b        c   ====> arr[2] = 40 이런 식으로 위치에 있는 값을 변경할 수 있다.
 * 
 */
		int[] n1 = {1, 2, 3, 4, 5};			//	=====> 데이터형int / 배열명  n1 = {값1, 2, 3, 4, 5}로 초기화.
			System.out.println(n1.length);
		
		int n2[] = {0};	//=====> C / C++ 에서 사용하기 때문에 가급적 권장하지 않음
			System.out.println(n2.length);		
			
		int n3[] = new int[3];
			System.out.println(n3.length);
			
//		int n4[3] = new int[3];
//			----- 배열로 데이터를 저장[] 한다는 의미이므로 오류가 발생.
				
		
		
	}

}
