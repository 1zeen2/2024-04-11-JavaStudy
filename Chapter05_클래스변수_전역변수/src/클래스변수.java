/*
 *  데이터를 묶어서 사용 => 1개 이름으로 여러 개의 변수에 접근
 *  				   --------------------------
 *  					배열	 : 같은 데이터 형 크기를 이용한다 => 고정적이다(크기, 등..)
 *  					클래스 : 다른 데이터 형을 모아서 관리할 수 있다 => 가변적이다 (원하는 만큼 저장해서 사용이 가능하다)
 *  
 *  자바는 클래스로 시작해서 클래스로 종료된다.
 *  --------------------------------
 *   클래스 구성 요소
 *   ------------
 *   	데이터형 => 연산자 => 제어문 => 메서드 => 자바의 구성 요소
 *   	------------------------------- 필요한 경우에는 라이브러리 사용
 *   	1장 : 자바 설치, 특징
 *   	=====================================================
 *   	2장 : 변수, 데이터 형
 *   	3장 : 연산자
 *   	4장 : 제어문 / 배열											=> 웹 연결에 필요하고 자바에서 제일 중요한 부분
 *   **	5장 : 클래스 ****, 6장 ( 객체 지향의 특성), 7잘 (클래스 종류)
 *   	8장 : 예외 처리 (프로그램이 종료되지 않게)
 *  	=====================================================
 *  	9장 ~ 11장 : 라이브러리(암기 필요)
 *  	12장 : 핵심 ===> 오라클 연동
 *  	
 *  		프로그램
 *  		------
 *  			네트워크 	======> C / C++
 *  			데이터베이스 ====> Java => 웹
 *  
 *  메모리 구조
 *  ------------------------------------
 *  	메서드 영역
 *  	--------
 *  		1. 메서드
 *  		2. static 변수
 *  ------------------------------------
 *  	스택	==> 메모리 자체 관리
 *  	---
 *  		1. 지역 변수
 *  		2. 매개 변수 --------> 블럭이 종료가 되면 자동으로 메모리에서 회수된다
 *  ------------------------------------
 *  	힙 ==> 프로그래머가 관리	=>	GC (실제 데이터가 저장되는 영역)
 *  	--							--------------------- ==> 프로그램이 종료될 때 까지 유지된다.
 *  	 |	1. 배열
 *  	 |	2. 멤버 변수
 *  	 -------------
 *  ------------------------------------

 *  클래스의 구성 요소
 *  ----------------------------------------
 *  	뱐수
 *  		지역 변수 / 매개 변수	=> 	메모리에 저장 (메서드 호출 시에)
 *  								사용 범위는 메서드 안에서만 사용이 가능하다.
 *  
 *  								지역 변수 => 요청 처리를 위한 변수
 *  								매개 변수 => 사용자 요청 값이 있는 경우
 *  
 *  								stack이라는 곳에 저장이 된다.
 *  		
 *  		멤버 변수 	=> 메모리에 저장 시점 => new를 이용할 때 따로 생성된다.
 *  					=> 사용 범위는 클래스 전체 / 다른 클래스에서도 사용이 가능하다.
 *  		공유 변수	=> 메모리 저장 시점  => 컴파일 시에 한 개 메모리 공간이 생성된다.
 *  					=> 사용 범위는 클래스 전체 / 다른 클래스에서도 사용이 가능하다.
 *  
 *  	class A {
 *  		int a;
 *  		int c;
 *  		------		  ==> 저장이 안된상태
 *  		static int b; ==> 저장이 됨.
 *  	}
 *  	a, c => A aa = new A(); => 선언이 됐을 때가 저장 시점이다.
 *  
 *  	Stack				 Heap
 *  	--aa--	
 *  	0x100			
 *  	------	 	메모리 주소----------------- new => 동적 메모리 할당. (실행 시 마다 메모리 생성 =>
 *  				 0x100	   0	===> a	===> aa.a ==> aa가 가지고 있는 a를 가져온다.
 *  						 -----
 *  					  	   0	===> c 	===> aa.c ==> ( . => 메모리 주소 접근 연산자)
 *  					     -----
 *  						-------- *** aa는 메모리 주소에 연결된 변수만 사용이 가능하다
 *  
 *  	A bb = new A();
 *  	
 *  	--bb--
 *  	0x200
 *  	------	   0x200------------
 *  						 0	-----> a	===> bb.a
 *  					------------
 *  						 0	-----> c	===> bb.c
 *  					------------	
 *  	--cc--
 *  	0x300	===> 생략
 *  	------
 *  
 *  
 *  	new를 사용할 때 마다 메모리 할당이 따로따로 진행되며 주소에 접근할 때는 . << 을 이용한다.
 *  
 *  	static	=>
 *  	
 *  	--b--
 *  	  0		aa.b, bb.b, cc.b, ==> 데이터의 공유가 가능한다.
 *  	-----
 *  	멤버 번수 사용이 거의 대부분이다
 *  	------ 지역 변수 / 매개 변수
 *  	** 	프로그램 종료 시 까지 메모리를 유지한다 / 따로 저장이 되기 때문에 관리가 편리하다
 *  		다른 데이터 형 여러 개를 묶어서 사용이 가능하다
 *  	**	프로그램 : 데이터 관리 프로그램
 *  		React / Vue.js / Next.js	===>	데이터 관리 프로그램
 *  											---- AI / 머신 러닝 / 딥러닝 => data.go.kr
 *  	변수
 *  	--- 초기화
 *  		멤버 변수 / 공유 변수 => 기본 초기화
 *  			int = 0, boolean = false, double = 0.0, String = null
 *  		
 *  		멤버 변수
 *  		공유 변수
 *  		------ 명시적인 초기화
 *  		------ 자동 초기화
 *  		------ 메모리에 저장 초기화
 *  
 *  	class A {
 *  		멤버 변수 초기화
 *  
 *  		int b; = 0;
 *  		int a = 100; => 명시적인 초기화
 *  
 *  		=> 자동 초기화 (호출 없이 사용하는 경우)
 *  		{
 *  			=> 초기화 블럭
 *  			a = 1000;
 *  		}
 *  		{
 *  			===> 자동 로그인
 *  		}
 *  		공유 변수 초기화
 *  
 *  		static {	====> 공유 변수 초기화.
 *  			d = 1000;
 *  		}
 *  
 *  		지역 변수는 반드시 초기화 해서 사용해야 한다.
 *  		-----------------------------------------
 *  		class A {
 *  			int a; ===> 선언만 가능.
 *  						구현은 불가능하다.
 *  						제어문 / 연산 처리 / 라이브러리 호출 전부 (불가능)하다.
 *  		}	
 *  		-----------------------------------------
 *  	}
 *  	지역 변수 => 반드시 초기화 해서 사용해야 한다.
 *  
 *  	
 *  ----------------------------------------
 *  	새성자 / 초기화
 *  ----------------------------------------
 *  	메서드 : 저장된 변수를 활용
 *  	---- 기능
 *  	=>	리턴형과 매개 변수를 잘 파악해야 함.
 *  	  	----   ------- => 사용자가 요청한 값 => 웹 (검색어, 로그인, 회원 가입, 글쓰기, 수정 ... 등)
 *  		  |
 *  	요청 처리에 관한 결과 값
 *  ----------------------------------------
 * 
 *  클래스 => 재사용 목적 (부품) => 컴포넌트
 *    |
 *   1. 데이터 보호 (노출을 막는다) => 캡슐화 / 은닉화
 *   2. 재사용 	=> 상속 / 포함
 * 				is - a / has - a
 *   3. 유지 보수	=> 수정, 추사
 *   		   오버라이딩, 오버로딩 => 다형성	
 *    --------------------------------- 6장 (면접의 단골)
 *    	***	라이브러리를 사용
 *    	    ------------- 미국의 특징(정보 제공) : 시각적 효과
 *    			| 프로그램에 맞게 변경해서 사용한다 => 오버라이딩
 *    			| Math.random() => 형변환
 *    			| substring(int s, int e)
 *    							   ------ e를 제외한 전 글자까지 잘라서 s부터 e까지 출력을 원한다명 e+1을 해야 한다.
 *    			| Spring : 로드존슨 => 전자정부 프레임워크에 사용
 *    
 *  
 *  
 */
public class 클래스변수 {
		// 선언만 가능한 블럭, 구현이 불가능하다.
	{
		// 구현이 가능한 블럭, 클래스 블럭 안에 블럭을 하나 더 열어주어야 구현이 가능하다.
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
