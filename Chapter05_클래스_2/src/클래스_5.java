/*
 * 	클래스의 구조 => 프로그램에 맞게 데이터나 / 메서드 관리를 위한 설계
 * 	활용은 메모리에 저장 후에 사용
 * 			==============
 * 			new  생성자() => 받은 주소를 이용한다
 * 							------------------- 객체
 * 	class ClassName {
 * 		-----------------
 * 		변수 (멤버 변수) => 클래스가 가지고 있는 변수
 * 		-----------------
 * 		초기화
 * 			= 초기화 블럭
 * 			= 생성자
 * 		-----------------
 * 			= 메서드
 * 		----------------- 기본 순서
 * 	}
 * 		*** 순서는 영향을 미치지 않음.
 * 		*** 변수 (어떤 데이터 활용) => 변수
 * 			=> 기능 설정 (메서드)	데이터 활용
 * 			=> 초기화 결정
 * 			=> 기타 변수 => 지역 변수로 활용
 * 
 * 		멤버 변수 : new를 사용하여 저장이 가능
 * 					클래스 전체 / 다른 클래스에 사용이 가능
 * 					일반 변수와 동일
 * 					=> 클래스는 한 개에 대한 정의
 * 						=> 영화 1개 / 레시피 1개 => 저장만 여러 개
 * 		생성자 : 클래스 명과 동일 / 리턴 형이 없다
 * 				=> 역할 메모리 할당할 때 호출 되는 메서드
 * 				=> 멤버 변수의 초기화
 * 				   ----------------- 서버 구동 / 화면 UI / 데이터베이스 연동
 * 				=> 반드시 필요하다 => 경우에 따라서 생략 ==> 컴파일러가 자동으로 추가해준다.
 * 		메서드 : 멤버변수가 가지고 있는 데이터를 활용할 수 있게 기능을 추가한 것.
 * 		----------------------------------------------------------------------------------- ===> 클래스의 구성 요소.
 * 		*** 다른 클래스에서 사용이 가능하다.
 * 			메서드 => 다른 클래스와 통신(연결)을 가능하게 해줌
 * 			------ 기능 변경 / 추가
 * 				 오버라이딩 / 오버로딩
 * 		*** 객체 지향 프로그램
 * 			1) 캡슐화 : 데이터 보호 목적 => 파밍 => 크롤링 (X) => 해킹 => Vue Js / React / Ajax
 * 			2) 재사용 : 상속, 포함 
 * 						---	 --- 있는 그대로 사용
 * 						 |
 * 					변경해서 사용
 * 			3) 다형성 : 오버라이딩 / 오버로딩 (생성자가 오버로딩을 지원) => 같은 이름의 메서드를 여러 개 지원해서 사용
 * 			   ---------------------------- 객체 지향의 3대 특성
 * 
 * 			자바 => 데이터 영구적 저장 => 화면 UI => 연결
 * 						오라클	     HTML / CSS => JDBC / JSP
 * 			------------------------------------------------- 통합 (Spring)
 * 																   ------- 자바 기반
 * 		*** 프로그램이 비정상 종료가 되지 않게 만든다 : 예외 처리(8장) ===> 1 ~ 8장 까지가 자바의 기본 문법
 * 		
 * 
 */
class Movie {
	// 명시적 초기화를 하게 되면 다 같은 값이 들어가기 때문에 선언만 해준다.
	int rank;
	String title;
	String reserve;
	String regdate;
}
public class 클래스_5 {
	/*
	 *	m1 = Movie@1eb44e46
	 *	m2 = Movie@e73f9ac
	 *	m3 = Movie@61064425
	 */

	public static void main(String[] args) {
		Movie m1 = new Movie();
		System.out.println("m1 = " + m1);	//	class의 주소 값을 보기 위한 출력
		m1.rank = 1;
		m1.title = "범죄도시4";
		m1.reserve = "27.4%";
		m1.regdate = "2024.04.24";
		
		Movie m2 = new Movie();
		System.out.println("m2 = " + m2);
		m2.rank = 2;
		m2.title = "혹성탈출-새로운 시대";
		m2.reserve = "24.2%";
		m2.regdate = "2024.05.08";
		
		Movie m3 = new Movie();
		System.out.println("m3 = " + m3);
		m3.rank = 3;
		m3.title = "악마와의 토크쇼";
		m3.reserve = "15.2%";
		m3.regdate = "2024.05.08";
		
	}

}
 