/*
 * 	1.	객체 => 변수 (여러 개의 변수 / 메서드)를 동시에 관리하는 영역
 * 	 	--- 설계 => 영역 class
 * 		--- 동시에 관리를 위해서는 new로 저장을 해야 한다. 
 * 
 * 	2.	명사적 => 변수		
 * 		동사적 => 메서드	===> 점심을 먹는다, 시험을 본다, 게임을 한다, .... (동작)
 * 	
 * 		학생
 * 			학번, 이름, 성별, 주소, 학교 명... => 변수로 잡아준다.
 * 			---------- ----------	|=> 한 개의 이름만 가지고 있다. => static
 * 				|		  	|		
 * 				|			|			
 * 				-------------
 * 					  | 학생 마다 따로 가지고 있는 변수 => new 를 사용하여 따로 저장하는 공간을 만들어준다.
 * 
 * 		변수를 활용하는 메서드 => 클래스 => 관리 (객체)
 * 		=> 예)
 * 			시계
 * 			시침 / 분침 / 초침
 * 
 * 			계산기
 * 			첫 번째 정수 / 두 번째 정수 / 연산자
 * 
 * 		=> *** 객체란 현실 세계 / 비현실 세계를 특성화 시킨 것 이다. (기술 면접에 굉장히 자주 나오는 내용)
 * 											  ----- == 추상화 == 단순화
 * 
 * 		벤치 마킹 (사이트 결정) ===> 분석 (명사적, 동사적 변수) => 클래스 설계
 * 											|		  |			=> 필요한 데이터(변수), 사용자 행위(메서드)
 * 										  출력물	  클릭 / 메뉴 선택		|
 * 																	공통으로 사용되는 변수인지 (static 변수)
 * 																	따로 사용되는 변수인지 (인스턴스 변수)
 * 
 * 		= 클래스 명
 * 		= 변수 식별자와 동일.
 * 		  -----------------
 * 		  알파벳이나 한글로 시작하며, 알파벳은 대소문자를 구분하고, 특수 문자는 (_, $)가 사용이 가능하다.
 * 		  '_'는 단어가 2개 이상이거나, 임시 클래스를 사용하였을 때 많이 사용한다.
 * 			=> Main_Class, File_Name, _Temp
 * 
 * 		  숫자 사용이 가능하지만 맨 앞에 사용 불가. 공백, 키워드도 사용이 불가하다.
 * 			=> 한글은 가급적이면 사용하지 않는 것을 권장함다 (운영 체제에 따라 다르기 때문에) ==> 리눅스에서는 한글이 깨짐.
 * 			=> 한글 제작 ==> AWS에 호스팅 ==> 한글이 깨져 동작이 되지 않음.
 * 			=> 알파벳 사용 시 첫 문자는 대문자로 한다.
 * 			
 * 		*** 면접 => 입사 => 파견지의 인터뷰
 * 		*** 클래스 명, 변수가 없는데 호출, 들여쓰기 ==> 기본적인 부분들은 잘 지켜주어야 한다.
 * 			------------------------------------
 * 			= 같은 폴더에서는 같은 이름의 클래스 명을 사용할 수 없다.
 * 			= 한 개의 파일(.java)에 여러 개의 클래스를 만들 수 있다.
 * 			= 클래스의 형태
 * 				= 데이터 형 클래스
 * 					=> 변수만 설정 => 사용자 정의 데이터 형
 * 									 ~VO(Value Object) ==> Spring / ~DTO (Data Transfer Object) ==> MyBatis / ~Bean ==> JSP
 * 				= 액션 클래스
 * 					=> 메서드 설정 => 기능만 처리한다.
 * 									~DAO, ~Manager, ~Controller (요청 => 응답)
 * 
 * 		class ClassName {
 * 			*** 멤버 변수
 * 				new 를 사용하여 => 저장하는 방식 ==> 따로 메모리가 생성된다. => 인스턴스 변수 (객체 변수)
 * 				컴파일 시 저장하는 방식 ==> 한 개의 메모리만 생성된다. => 정적 변수 ==> static
 * 
 * 			*** 초기화 하는 방법
 * 				인스턴스 변수 : {}, 생성자 이용
 * 				스태틱 변수 : static{}, 생성자 => 자동 저장이 가능하여 => 생성자를 이용하지 않는다.
 * 			
 * 			*** 변수 활용 => 메서드
 * 		}
 */		
public class 클래스_2 {

	public static void main(String[] args) {
		

	}

}
