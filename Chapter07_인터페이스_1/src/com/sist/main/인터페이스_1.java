package com.sist.main;
/*
 * 	1. 인터페이스란?
 * 		=> 추상 클래스의 일종 => 특수한 클래스	 => 상속 시에 상위 클래스 역할
 * 		   ---------------- 미완성 된 클래스 => 상속 내려서 구현해서 사용
 * 							-------------- 자신이 메모리 할당을 할 수 없다.
 * 		=> 추상 클래스의 단점을 보완한 것
 * 		   ---------------------------- 단일 상속만 가능하다는 단점을 다중 상속으로 변경할 수 있게 해줌.
 * 										추상 클래스는 구현이 된 메서드 / 구현이 되지 않은 메서드 2개가 존재하는데
 * 											=> 인터페이스는 구현이 안된 메서드만 해당된다.
 * 														   -----------------
 * 		=> 역할
 * 			1) 서로 다른 클래스를 연결해서 사용한다.
 * 			2) 관련 클래스를 묶어서 한 개의 객체 명으로 제어한다.
 * 			3) 설계와 관련 => 재사용 (기능 설계)
 * 			4) ------------------------------- 모든 개발자가 동일한 메서드를 재정의 : 표준화
 * 				표준화 : 라이브러리
 * 				-----	 System.out.println()
 * 				  |		 Math.random()
 * 				  |		 NextInt()
 *				  |=> 소스의 통일화 ==> 소스 분석이 쉽다 ===> 유지보수가 쉽게 만들기 때문에
 *					  ----------- Spring
 *				=> 요구 사항 분석 => 인터페이스
 *				=> 아이템 선정 => 잠조할 사이트(벤치 머킹) => 기능 추출 / 데이터 추출
 *														인터페이스	/	크롤링 (사용자 정의 데이터형)
 *				=> 사이트에 사용할 데이터 크롤링 => 오라클에 저장
 *					=> 데이터베이스 설계 => 데이터 수집
 *				=> 구현 ==> jSP / Spring
 *				=> 테스트 ==> 오류 발생 여부 확인
 *				=> 배포 ==> 발표
 * 		
 * 	2. 인퍼페이스 구성 요소
 * 		[접근 지정어] interface interface 명
 * 		-----------	 ---------
 * 			 | default / public => 다른 클래스를 묶어서 관리 => public
 * 		{
 * 			-------------------------
 * 			변수 : 		==> 상수
 * 			int a;		==> 오류 발생
 * 			int a = 10; ==> 반드시 초기하를 해주어야 한다
 * 			=> 생략
 * 				(public static final) int a = 10;
 * 			-------------------------
 * 			구현이 안된 메서드
 * 			=> void aaa();
 * 				void bbb();
 * 			=> 생략
 * 				(public abstract) void aaa();
 * 				-----------------
 * 						|
 * 					자동 추가
 * 			-------------------------
 * 			JDK 1.8
 * 			부터는 구현된 메서드도 지원	
 *  
 *  
 * 			-------------------------
 * 		}
 * 	3. 인터페이스의 장점
 * 	4. 인터페이스의 상속
 * 		=> 인터페이스와 인터페이스 상속
 * 		=> 인터페이스와 클래스 상속
 * 		=> 다중 상속
 * 	5. 인터페이스 활용
 * 	------------------------------------> 객체 지향의 마지막
 * 	=> 예외 처리 (형식)
 * 	=> 라이브러리 (암기)	=> 메서드 => 기능, 원형 (리턴 형 / 매개 변수)
 * 	   --------------- 컬렉션 (배열 대신) => 웹
 * 					   ----- 고정이 아니다. => 개수 => 제네릭스 (자동 형변환)
 * 	=> 웹 (데이터베이스 연동)
 * 		  ----------------- 브라우저 => 데이터 형 클래스
 * 	=> 틀을 만들어 놓는다 : 스프링 (프레임 워크) => 메인 보드의 개념. CUP나 RAM 등을 만들어서 꽂아 넣는 식으로 프로그램 작성
 * 						  ------------------- Spring-Boot
 * 	=> AWS에 호스팅 => 리눅스 명령어 공부가 약간은 필요하다.
 * 
 * 	* 웹 프로그램
 * 		자바 :	변수 (데이터 형), 연산자, 제어문
 * 				= 묶어서 사용
 * 				  ----------
 * 					1) 명령문 묶기	=> 메서드
 * 					2) 변수 묶기 	=> 배열 (1차원), 클래스
 * 
 * 				= 객체 지향 프로그램 : 권장 사항 (연연할 필요는 없다)
 * 					1) 데이터 보호	=> 캡슐화 (getter/setter) ==> 크롤링
 * 					2) 인터페이스	=> 클래스 여러 개를 묶어서 관리할 수 있게 해주기 때문에 ==> 결합성이 낮은 프로그램을 만들 수 있게 해준다. (그래야 분업하다가 생기는 오류가 다른 사람에게 영향을 안미침)
 * 					3) Overriding	=> 인터페이스는 Overriding 주로 사용한다.
 * 
 * 				= 프로그램 비정상 종료 방지
 * 
 * 				= 사용자 정의 + 라이브러리 => 조립
 * 
 * 				-------------------------------- 사용 처
 * 				= 2차 자바 : 오라클 연동	==> JDBC
 * 
 * 				= 3차 자바 :	 웹 연동		==> J2EE (JSP)
 * 											---------- JSP가 사라지는 느낌 : 타임 리프, VueJS
 * 												=> 1차 프로젝트
 * 
 * 				= 4차 자바 : 스프링.스프링부트 : 어노테이션 / XML
 * 							-----------------	=> 2차 프로젝트
 * 
 * 				= 서버단
 * 					=> 개인 프로젝트
 * 						스프링부트	=>	React-Query
 * 					--------------------------------
 * 						장고			=>	ReduX
 * 						---- 파이썬	=> 	예측, 통계	
 * 					--------------------------------
 * 
 * 
 * 
 */
public class 인터페이스_1 {

	public static void main(String[] args) {
	

	}

}
