package com.sist.main;
/*
 * 	1.	반복 문장이 많다 => 제거
 * 		----------------------
 * 		재사용, 다른 클래스에서 연결 => 한 가지 기능만 수행
 * 		--------------------------	  ------------------
 * 				메서드				   구조적인 프로그램 ==> 에러, 수정
 * 
 * 	2.	관련 된 클래스 여러 개 => 한 개의 객체 명으로 처리한다.
 * 		--------------------- 인터페이스
 * 		
 * 	3.	비정상 종료 없이 프로그램 유지 => 예외 처리
 * 		-------------------------------------------------------------
 * 		=> 변수 ==> 사이트
 * 		-----------------
 * 		=> 누가 잘 묶어서 사용하는가에 따라 실력이 나뉨 ==> 재사용
 * 		--------------------------------------------
 * 		변수 => 배열 / 클래스
 * 		명령문(연산자, 제어문) => 메서드
 * 		필요 시에 변수 초기화 => 생성자
 * 		=> 클래스 여러 개 ==> 인터페이스
 * 		=> 에러 처리 ==> 예외 처리
 * 		==> 윈도우 ===> 상속 ====> 오버라이딩(인터페이스)
 * 		----------------------------------------------- Java 기본 문법.
 * 		=> 라이브러리 + 사용자 클래스
 * 		   ------------------------ 조립 (응용)	
 * 
 * 	=> 예외 처리
 * 		=>	1. 파일 입출력
 * 			2. 네트워크
 * 			3. 오라클 연동
 * 			   ----- 데이터를 모아두는 장소 (영구적인 저장 장치)
 * 			   ----- 파일의 단점 : 여러 개 연결해서 사용할 수 없다.
 * 			   ----- 여러 개를 연결할 수 있다 (RDBMS)
 * 
 * 		1. 생략이 가능
 * 		2. void => return
 * 		3. 생성자 생략
 * 		4. extends Object
 * 		5. 실행시 파일 => 예외 처리 생략이 가능
 * 	-----------------------------------------------------------------
 * 	4. 인터페이스
 * 		=> 상수
 * 		=> 추상 메서드
 * 		=> default
 * 		=> static
 * 
 *			=> interface A {
 *          	   (public static final) int a = 10;
 *            
 *      	    => (public) static fianl int A = 100;
 *        	 	   (public abstract) void disp();
 *         
 *        	    => public (abstract) void disp();
 *                (public) default void aaa(){}
 *       	 	 }
 *        ********* interface 는 접근지정어에 public 만 사용이 가능하다 ***********                                                                   ㄴ  
 * 		 
 * 
 * 
 */
interface ABC {
	int AA = 100;
}
public class 예외처리_9 {

	public static void main(String[] args) {

	}

}
