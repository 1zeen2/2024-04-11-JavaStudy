/*
 * 메서드
 * 	=> 기능
 * 	=> 클래스 안에 존재해야 하며 독립적으로 사용이 불가능하다.
 * 	=> C / C++ / Python	=> 단족으로 사용이 가능 => 함수라고 부름
 * 	=> 사용자로부터 입력값을(요청)을 받아서 처리한 결과를 반환한다
 * 				-----------		  -----------
 * 				매개 변수 => ()		리턴형
 * 	=>	기능 처리
 * 	  	------ 웹 (메뉴, 동작)	=> 키보드(입력), 메뉴 / 버튼 / 이미지 클릭, 등
 * 							   ----------------------------------
 * 								|			메서드
 * 								|검색 => 검색 결과 (리턴형)
 * 		=> 변수 / 메서드
 * 				  | 제어문 / 연산자 => 메서드
 * 	1. 메서드의 형식
 * 		리턴형 메서드명(매개변수...) { ==> 선언부
 * 		----		---------
 * 		 |			사용자 요청 값
 * 	처리 결곽 값	=======================> 처리 결과 값 : 기본형
 * 			// 구현부									결과 값이 많은 경우 : 배열, 클래스, 컬렉션(웹) => 목록 표시
 * 			.......														 ----------
 * 			......															1개 => 메모리 주소
 * 			return 값 (변수, 배열명, 클래스 객체)
 * 			// 생략이 가능 => 결과 값 없이 메서드에서 처리하는 경우 => void
 * 		}
 * 
 * 		= 리턴형	  : 사용자 요청에 대한 처리 결과 (결과 값이 1개만 가능) => Python은 여러 개 가능.
 * 		-----------------------
 * 			def func :
 * 				...
 * 				...				==> Python 형식
 * 				return a, b, c
 * 			=> a, b, c = func()
 * 		-----------------------
 * 		= 매개 변수	: 사용자로부터 받는 값 => 여러 개 받는 경우도 있다
 * 			로그인	: id, pwd
 * 			검색		: 검색어
 * 			회원 가입	: id, pwd, name, sex, born, etc.. => 배열, 클래스
 * 		=> 매개 변수가 3개 이상 초과하는 경우 배열, 클래스로 묶어줘야 한다.
 * 		= 	메서드 명 : 변수의 식별자와 동일
 * 		=	구현 {
 * 				변수 / 연산자 / 제어문 => 결과 값 얻기
 *			 }
 *
 * 	2. 메서드의 유형
 * 		--------------------------
 * 			리턴형		매개 변수
 * 		--------------------------
 * 			 O			   O	=> String
 * 									String substring(int, int)
 * 		--------------------------
 * 			 O			   X	=> Math
 * 									double random()
 * 		--------------------------
 * 			 X			   O	=> 자체 처리 : 출력이라는 단어가 나오면 이 유형이다.
 * 								=> void, System
 * 									void print(String s)
 * 		--------------------------
 * 			 X			   X	=> System
 * 									= System.out.println()
 * 		--------------------------
 * 		
 * 	3. 메서드의 활용 => 메서드 호출
 * 		1. 리턴 형이 있는 경우
 * 			데이터 형 변수 = 메서드 명() =====> int a = abc();
 * 
 *		2. 리턴 형이 없는 경우 
 *			메서드 명()		====> abc();
 *
 *		3. 매개 변수가 있는 경우
 *			메서드명 (값, 값)	===> abc(num1, num2);
 *		
 *		4. 매개 변수가 없는 경우
 *			메서드 명()		====> abc();
 *
 *	4. 주의할 점
 *		메서드가 호출되면 메서드의 처음부터 명령 문을 수행하게 된다.
 *		---------------------------------------------
 *		매개 변수는 설정된 순서로 값을 확인한다.
 *		(int, char, double) => 데이터 형의 순서대로 값이 들어감,
 *
 *		메서드에 선언된 변수 / 매개 변수는 => Stack 공간에 저장되고 => 메모리 자체에서 처리된다.
 *			=> 메서드가 종료되면 자동으로 사라진다 (지역 변수 / 블록 변수 => 메서드 안에서 사용되는 변수)
 *			=> 지역 변수는 반드시 초기롸를 해서 사용해야 한다.
 *			=> 호출 시에는 실제 값을 꼭 넣어주어야 한다. 
 *				s = (i, 10) ===> 매개 변수 1에 i 대입, 매개 변수 2에 10 대입 
 *	
 *	
 */
import java.util.Scanner;

public class 메서드_1 {
	static int input() {
		Scanner scan = new Scanner(System.in);
		System.out.println("정수 입력 : ");
		return scan.nextInt();
	}
	static int rand() {
		return (int)(Math.random() * 100) + 1;
	}
	static char alpha() {
		return (char)((Math.random() * 26) + 65);
	}

	public static void main(String[] args) {
		
		int num = rand();
		System.out.println("num = " +num);
		
		char c = alpha();
		
		for (int i = 0; i < 10; i ++) {
			char cc = alpha();
			System.out.println("cc = " + cc);
		}
		System.out.println("c = " + c);

	}

}
