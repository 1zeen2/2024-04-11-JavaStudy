package com.sist.main;
/*
 * 	
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 		protected : 같은 패키지 => 다른 클래스까지 사용 가능
 * 					상속이 있는 경우 => 다른 패키지까지 접근 가능.
 * 	--------------------------------------------------------
 * 		public	: 모든 클래스에서 사용이 가능하다.
 * 	---------------------------------------------------------
 * 		1) class 선언
 * 			[접근 지정어] class ClassName		=> public 	==> 다른 클래스와 연동
 * 			[접근 지정어] 데이터형 변수명			=> 데이터 보호	==> private
 * 			[접근 지정어] 생성자()				=> public ==> 다른 클래스와 연동
 * 			[접근 지정어] 리턴형 메서드명()		=> public ==> 다른 클래스와 통신
 * 			[접근 지정어] interface 인터페이스명	=> public ==> 다른 클래스에서 구현 후 사용
 * 		=> private / public
 * 
 * 	=> 제어어	
 *		static 	 : 공통적인 => 모든 객체가 공통으로 사용
 *		abstract : 미완성된 => 상속을 내려서 구현한 클래스를 이용한다.
 *		final	 : 마지막	  => 클래스 (종단 = 상속을 내릴 수 없는 클래스)
 *						  => 메서드 (종단 = 오버라이딩이 불가능)
 *						  => 변수 (상수 - 값을 변경할 수 있다)
 *
 *		[접근 지정어][제어어] ~~
 *		[제어어][접근 지정어] ~~
 *			=> Overriding ==> 접근 지정어의 확장은 가능 / 출소는 불가능하다.
 *			   --------------------------------------------------
 *		=> static 메서드 / static  블럭에서는 인스턴트를 사용할 수 없다.
 *										 --------  반드시 메모리 할당 후 사용해야 한다.
 *		
 *			
 *
 *
 *	class A {
 *		int a;
 *		public static void dilsplay() {
 *			a = 200  // 오류
 *			aa.a = 100
 *		
 
  * 
  * ㄴ	class ClassName {
 * 
 */
public class 정리_1 {

}
