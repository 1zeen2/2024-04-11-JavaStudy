/*
 * 	프로그램 형식
 * 		1) 평문 	: 순차적으로 처리 => 연산자
 * 		2) 조건문	(선택문)	=>	필요에 따라서 건너뛴다. 프로그램에 맞게 수행이 가능
 * 			=> 로그인, 아이디 찾기, 검색, 상세 보기
 * 			=> 종류
 * 				1. 단일 조건문	
 * 					=> 형식
 * 						if(조건문) => true / false => 부정연산자 / 논리연산자 / 비교연산자
 * 						{
 * 							조건이 true일 경우에만 수행하는 문장
 * 						}
 * 						=> 부정연산자(!)	=>	반대의 효과를 가짐 / true => false, false => true
 * 						=> 논리연산자		=>	ID가 같고 비밀번호가 같은 경우 => &&, ||
 * 						=> 비교연산자(==, !=, <, >, <=, >=)
 * 						=> 프로그램 : 라이브러리 사용 / 데이터베이스(오라클) => 데이터 처리
 * 						   ------------------------------------------------------------------
 * 						   사용자가 요청한 데이터만 읽기 => 출력
 * 						   ---------------------
 * 								| 조건 => 사용자 요청 / 처리 결과물 => 사용자 중심의 프로그램
 * 								| 요구 사항 분석	=> 	필요한 데이터 저장(데이터베이스)
 * 								  ---------- 아키텍처	------------- DBA
 * 									=> 화면 UI	=>	구현(Java)	=>	테스트	=>	배포
 * 																 	---- 테스터
 * 													---- 웹 프로그래머(서버 / 클라이언트)
 * 																	-- Java, Spring
 * 									   ----- 퍼블리셔
 * 					Spring / Spring-Boot / MyBatis / JPA / JSP / MVC	=> Java 기반
 * 					ASP.net	=> C#
 * 					Vue, React => JavaScript 같은 경우 사람마다 코드가 짜는 경우가 다른데 이를 통일해줄 수 있는 프로그램
 * 				
 * 					=> 자바에서 제어문은 바로 밑에 있는 문장만 제어할 수 있다.
 * 					=> if(조건문)
 * 					{
 * 						실행 문장1 ==> if 소속 문장
 * 						실행 문장2 ==> if문과 관련 없는 문장 => 무조건 수행
 * 					}
 * 				=> 오류 처리 / 예외 처리
 * 				
 * 				중첩 조건문
 * 				if(조건문)
 * 				{
 * 					if(조건문)
 * 					{
 * 						실행 문장
 * 					}
 * 				}
 * 
 * 			===> if(조건문 && 조건문)
 * 					{
 * 						실행 문장 = 조건이 true일 때만 수행
 * 					}
 * 
 * 				2. 선택 조건문	=> true / false를 나눠서 처리
 * 				3. 다중 조건문	=> 여러 개의 조건 중 한 개만 처리
 * 				4. 선택문		=> 값 1개 선택 후 처리	=> 메뉴, 키보드(게임)
 * 		3) 반복문	=>	같은 코딩이 여러 번 나오는 경우
 * 			=> 목록 출력, 검색 결과
 * 
 * 		
 * 	
 */
// 두 자리의 정수를 입력하고 같은 숫자인 경우에 출력.
import java.util.Scanner;
public class 제어문_조건문_1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner scan = new Scanner(System.in);
		// 모든 클래스는 메모리에 new를 사용	=>	동적 메모리 할당	=>	메모리에 저장
		System.out.println("1 ~ 100 사이의 두 자리 정수를 입력하시오.");
		int num =scan.nextInt();			//	키보드로 입력된 정수 값을 받는다
		if(num >= 10 && num <= 99) {
			//정상 입력 된 경우
		/*	int a = num / 10;
			int b = num % 10;
			if(a == b) {
				System.out.println("같은 숫자 입니다.");
			}
			if(a != b) {
				System.out.println("다른 숫자 입니다.");
			}
		*/
			if(num % 11 == 0) {
				System.out.println("같은 숫자 입니다."); 
			}
			if(num % 11 != 0) {
				System.out.println("다른 숫자 입니다.");
			}
		}
		// 10~ 99의 숫자가 아닌 경우의 예외 처리
		if(!(num >= 10 && num <= 99)) {
			System.out.println("잘못된 입력 입니다!!");
		}
			// 처음부터 다시 수행하기 위해서는 반복문 / 메소드 등의 방법이 필요하다
		
		
		
		
		
		
		
		
		// 1 ~ 10000 사이의 짝수를 출력.
/*		for(int i = 1; i <= 10000; i ++) {
			if(i %2 == 0)
			System.out.println(i);
		}
*/
		
		}

}
