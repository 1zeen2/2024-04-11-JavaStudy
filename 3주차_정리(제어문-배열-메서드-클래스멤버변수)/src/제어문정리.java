/*
 * 	프로그램 => 변수 연산자 제어문 => 3가지로 프로그램은 작성이 되고 돌아간다.
 * 			   ---- ----- ------
 * 					  | 문장이 길어진다 => 묶어서 사용 (메서드)
 * 				=> 많은 경우 => 이름을 한 개로 압축
 * 				   ------------------------------- 배열 / 클래스
 * 													|		| 가변적이다, 다른 데이터 형을 모아서 관리(********)
 * 													| 고정적이다, 같은 데이터 형만 모아서 관리한다.
 * 				=> 1. 변수를 여러 개
 * 				=> 2. 명령문 여러 개
 * 					  ------------- +
 * 									클래스 (한 개에 대한 기능)
 * 									=> 게시판 ===> 묻고 답하기, 댓글, 갤러리, 등의 기능을 추가할 수 있음.
 * 										-------------------------------------------------
 * 										글쓰기, 목록 출력, 상세 보기, 수정, 삭제, 검색, 등.. ==> 각각의 메서드를 하나로 묶어 게시판 클래스를 만들 수 있다.
 * 										-------------------------------------------------
 * 																						  ==> 1차 project에서 게시판을 구현하고 2차 project에서 기능을 추가하며 보완하는 방식.
 * 
 * 										=> 회원 : 가입, 탈퇴, 수정, 로그인 처리, 아이디 찾기, 등... 이런 여러가지 기능을 하나의 기능으로 묶어서 사용하는 것을 객체 지향의 특징이다.
 * 											--------------------------------------------- ==> 다음에 재사용, 혹은 기능 추가.
 * 											==> 재사용을 한다는 것은 => 이미 사용되고 있는 기능들이나, 코드, 등을 사용하는 것 이기 때문에 신뢰성이 높다.
 * 
 * 	=> 문법은 변수, 연산자, 제어문을 사용하는 방법 => 누가 더 관련된 것 끼리 잘 묶어서 사용하는가에 따라 자바의 실력이 나뉘어진다
 * 
 * 	프로그램 제어
 * 	------------
 * 	1. 조건문 : 프로그램에서 조건에 맞는 문장만 실행이 가능
 * 		=	단일 조건문
 * 				if (조건문)  { = 부정 연산자, 비교 연산자, 논리 연산자만 사용이 가능 ==> true / false만 조건문에 들어갈 수 있기 때문에
 * 					=> 조건이 true일 때 실행 문장 수행.
 * 							 false면 건너뛴다.
 * 				}
 * 				=> 오류 처리, 검색어 입력이 없는 경우, 입력 값 범위를 벗어난 경우 등.
 * 				=> 입력 창이 있는 경우
 * 					------ 회원 가입 ==> 오라클은 (NOT NULL)이라고 해서 기본 값이 없다. ==> *필수 입력
 * 
 * 		=	선택 조건문
 * 			if (조건문) {
 * 				true일 때 처리
 * 			} else {
 * 				false일 때 처리
 * 				}
 * 			=> 서버 프로그램에서 => 요청 받아서 처리하기 때문에 => 결과 값을 보내주어야 한다. (true / false)
 * 								  --------------------------
 * 									로그인이 된 경우 		==> main 이동
 * 									로그인이 안 된 경우	==> ID, PWD가 다릅니다.
 * 								  --------------------------
 * 
 * 		= 다중 조건문 =====> 해당 조건문 한 번만 수행이 가능하다.
 * 			경우의 수가 많은 경우
 * 			=> 로그인 하는 상황 =>	ID가 없는 경우
 * 									ID가 틀린 경우
 * 									로그인이 된 경우
 * 			if (조건) {
 * 				=> true일 경우 처리 => 종료
 * 					false일 경우 아래의 else if로 이동
 * 			} else if (조건) {	
 * 				=> true일 경우 처리 => 종료
 * 					false일 경우 아래의 else if, 혹은 else로 이동
 * 			} else {
 * 				생략이 가능하며, 해당 조건이 없는 경우에 주로 처리한다.
 * 			}
 * 			= 메뉴 처리, 키보드 처리, 네트워크 프로그램
 * 			==> 다중 조건문을 조금 더 간결하게 만든 제어문 ===> switch case 
 * 															 ----------- 애플리케이션, 웹(다중 조건문)에서 많이 사용 * 
 * 	2. 반복문 : 같은 동작을 하는 소스 모아서 처리
 * 		=> 데이터베이스 읽기 / 파일 읽기에서 많이 사용
 * 		=> 화면 출력 => 목록
 * 		=> 반복 횟수가 지정된 경우 / 반복 횟수가 지정되지 않은 경우
 * 				---------- for문 / ----------------------- while
 * 				1	  2		  4								==> 순차적으로 진행된다.
 * 		for (초기값; 조건식; 증감식;) {							초기 값				1
 * 			반복 수행 문장   3									while (조건문) {		2번이 false인 경우
 * 		}															반복 수행 문장	3 
 * 			=> 1 2 3 4 2 3 4 2 3 4 .. 2 <== false일 때 종료.			증감식			4	=> 순서
 * 																}
 * 															==> 데이터베이스 / 파일 읽기
 * 														----------------------
 * 																롸면 무한 스크롤
 * 																이미지  글라이딩
 * 																-----------
 * 
 * 			HTML / CSS / JavaScript : 단점 => 데이터 수집이나 요청처리가 불가능 
 * 											 ------------------------------- 화면 출력 / 화면 변경 / 제어
 * 			----------------------- Front
 * 						| 데이터 전송
 * 					  Java ========> 매개 역할
 * 						|
 * 					  오라클
 *			------------------------ Back
 *			 						 ---- + Full Stack
 *			 						 
 * 																
 * 	3. 반복 제어문 	: 필요에 따라서 반복을 종료 / 특정 부분을 제어
 * 						=>  break				=> continue
 * 						for / while => 무조건 종료
 * 	
 */
public class 제어문정리 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
