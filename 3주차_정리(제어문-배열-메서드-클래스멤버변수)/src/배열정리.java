/*
 * 	배열 : 같은 데이터 형의 데이터를 여러 개 모아서 정리
 * 		  --------------
 * 			| 연속적으로 같은 크기의 메모리를 만든다
 * 			| 고정적이다 (한 번 실행하면 값을 변경할 수가 없다)
 * 			| 한 개의 이름으로 여러 개의 변수를 제어할 수 있다.
 * 							  ------------- 구분 하기 위해 인덱스를 이용
 * 			=> 배열의 단점을 보완한 것 ===> Collection (가변형 데이터 크기) => 웹에서 전송 용으로 많이 사용이 된다.
 * 																			----------
 * 			=> 검색 후 값을 => 전송할 때
 * 				=> 3, 5, 10 ...
 * 				  ---------- 값이 얼마나 들어올 지 정확하게 모르기 때문에 배열로 고정하기 어렵다.
 * 
 * 		=> 선언
 * 			데이터 형[] 배열 명;	//	***권장하는 방식
 * 			데이터 형 배열 명[]; // Java에서 지원은 하지만 권장하지 않음 ==> C에서 사용하는 방식
 * 		=> 초기화
 * 			데이터 형[] 배열 명 = {값, ....};
 * 			데이터 형[] 배열 명 = new 데이터 형[ 개수 ] => 자동 초기화  ===> 예시 ====> int[] arr = new int [7];
 * 		=> 인덱스
 * 			int[] arr = {1,2,3,4,5}
 * 			
 * 			arr[0]	arr[1]	arr[2]	arr[3]	arr[4]
 * 			-------------------------------------
 * 				1		2		3		4		5
 * 			-------------------------------------
 * 			=> 인덱스는 무조건 순차적으로 0번부터 시작된다.
 * 			=> 인덱스 범위를 벗어나면 ArrayIndexOutOfBoundsException 이라는 에러가 발생한다.
 * 
 * 		=> for - each ==> 많이 사용되는 for
 * 					  ==> 데이터 수정이 불가하고, 오로지 출력 용으로만 이용된다.
 * 			for (배열에 저장된 데이터를 받는 변수 : 배열 명)
 * 				------------------------------
 * 				반드시 배열과 받는 변수의 데이터 형이 일치해야 한다.	=======> 예시 int[] arr = new int [10]; /// 혹은 int[] arr = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
 * 				=> 실제 배열에 저장된 값을 읽어온다.						===> for (int i : arr)
 * 				=> front ==> HTML
 * 			=> 향상된 for ==> JSP / Spring에서 주로 이용한다.
 * 			------------------------------------------------- 4장
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 */
import java.util.*;

public class 배열정리 {

	public static void main(String[] args) {
		int[] arr = new int[5];
		// 10개를 검색한 경우 값이 들어가지 않음	

	}

}
