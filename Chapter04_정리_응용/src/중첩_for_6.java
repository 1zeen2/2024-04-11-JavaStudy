/*
 * 	1. 중복 없는 난수 => 응용
 * 		숫자 야구 게임
 * 	-------------------------
 * 	1. 난수 => 3개 3 6 9
 *  2. 사용자 입력 7 8 9
 *  3. 힌트
 *     같은 자리 일 때	=> strike
 *     다른 자리 일 때	=> ball
 *     2장(연산자)/ 3장(제어문)/ 4장 (배열)
 *     5장 이후 ==> 묶음
 *     
 *     1. 묶음
 *     	변수 여러 개를 묶어서 관리
 *     	변수 여러 개 ==> 제어문 사용이 어렵다.
 *     	----------- 평문을 사용한다.
 *     
 *     	***	배열은 변수가 3개 이상일 경우
 *     		*** 3개	=> 사용 용도가 같을 경우 ...
 *     		나이, 학번, 학년, ....
 *     	
 *     ==>	다음 내용
 *     		명령문 : 메소드
 *     		한 개에 대한 정보 묶기
 *     		클래스
 *     		--------------------- + 프로그램 생성 1개;
 *     ----------------------------------------------
 *     2장 연산자	=====> (연산 방향)	1
 *     	단항연산자		
 *     	[] 	, ()		=====			2
 *      ++	, --		=====			3
 *      ------------------------ !. type
 *      에)
 *      	(int)Math.randon() * 100
 *      		--------------------	형변환
 *      	2	1
 *      	---------------------------
 *      숫자와 관련 / / 클래스
 *      =	UpCasting	=> 	정수 --> 실수
 *      					문자 --> 정수
 *      	DownCasting	=>	실수 --? 정수
 *      					정수 --> 문자.
 *      	자동 형변환, 강제 형변환이 있음.
 *      이항연산자
 *      	연산 방향 =====>
 *      
 *      	비교 연산자 ----------------------------------------------\
 *      	eauals | intstanceof
 *      	| 문자열		| 클래스
 *      	=====> 모든 결과 값은 true / false
 *      
 *      
 *     	삼항연산자
 * 			=> 조건 ? trye ; False	==> if else => 웹, 게임에서 주로 사용
 * 													--------	<= 단점	"	자바, CS, JavaScript 등.
 * 				login ? "로그아웃 : 로그인
 * 				if (login)
 * 				= 로그아웃 
 * 				el	
 * 					로그인
 *     	대입연산자
 *    
 *    산술연산자 => 대입연산자 순으로 연산.
 *    반복문에서의 제어문은 비교, 증감 연산자가 많음
 *    ------------------------------------------------
 *    3장 제어문 : 프로그램을 제어
 *    				= 반복 수행
 *    					for		=> 반복 횟수 정해져 있고 false -> true가 될 때 까지 반복.
 *    					while	=> 반복 횟수를 알 수 없고 true -> false가 될 대 까지 반복
 *    
 *    				= 건너 뛰기
 *    					단일 조건문
 *    
 *    				= 선택한 내용만 처리
 *    					다중 조건문, 선택문
 *    
 *    				= 오류 처리
 *    					throws / try ~ catch => 반드시 예외 처리를 해야 함 => file, network
 *    
 *    				= 반복문의 제어
 *    					종료 : break;   => 반복문, 선택문만 가능
 *    					제외 : continue => 반복문에서만 사용이 가눙
 *    --------------------------------------------------------------------------------------
 *    => 조건문
 *    	1. 제어문 형식
 *    	2. 동작 순서
 *    	3. 사용 위치
 *    		=> 오류 처리 => 사용자 입력 값을 받은 경우에 주로 처리한다.
 *    	4. 조건 설정
 *    		=> if를 여러개 사용하면 독립적이기 때문에 모든 조건을 검색하기 때문에 실행 속도가 느려질 수 있다.
 *    
 *		if ~ else 선택 조건문 ==> true / false에 해당되는 소스 코딩.
 *    		=> 한 줄로 사용할 때 : 삼항 연산자를 이용.												=> (조건식) ? 값 1 : 값 2
 *    
 *    		=> 두 줄로 사용할 때 : 로그인 / 아이디 중복 / 회원 가입 여부 / 검색어 입력 여부 / 		=> if, else (if)
 *    	
 *		다중 조건문 => 해당 조건 문장 1개만 참이 될 때 까지 수행. => 키보드 입력(게임), 메뉴
 *			단순화 하면	----------------------------------- 
 *			|==> switch (정수, 문자, 문자열) {};
 *					=> 해당 case가 참이 되는 경우 실행. / 웹에서는 사용 빈도가 적고 네트워크의 경우 수, 게임에서는 사용할 수도 있다.
 *																				----------- => 미니 프로젝트 제작	
 *    --------------------------------------------------------------------------------------
 *    			교재의 커리큘럼
 *    ** 2장 ~ 8장이 자바의 기본 문법이다**
 *    ** 9장 ~ 12장이 자바의 라이브러리 **
 *    마지막은 다른 연결 프로그램 연결: 네트워크, SQL
 */   

import java.lang.reflect.Array;
import java.util.Arrays;
import java.util.Scanner;


public class 중첩_for_6 {

	public static void main(String[] args) {
		/*	1.	컴퓨터 난수 발생. 1 ~ 9 사이의 중복이 없는 숫자 3개
		 * 	2.	사용자 입력 요청
		 * 	3.	비교 => 힌트
		 * 	4.	정답 여부 확인 => 정답이면 종료 / 오답이면 다시 입력이 가능.
		 * 						 ------------ break / ------------------- continue
		 */

		int[] com = new int[3];
		
		for (int i = 0; i <= com.length - 1; i++) {
			com[i] = (int)(Math.random() * 9) + 1;
			for (int j =0; j < i; j++) {			// 생성된 난수 만큼만 비교를 한다.
				if (com[i] == com[j]) {				// 같은 수가 있는지 확인한다.					=> 비교 연산 / 논리 연산만 가능.
					i--;							// 다시 난수를 발생한다.
					break;							// j가 있는 for문만 종료 ==> i++로 이동.
				}
			}
		}
//		System.out.println(Arrays.toString(com));	// 중복되는 수가 없는지 확인.
		
		int[] user = new int[3];
		
		Scanner scan = new Scanner(System.in);
		
		while (true) {								// 반복 회수가 없고 com의 난수를 맞출 때 까지 무한으로 돌리기 때문에 while문 이용.
			System.out.println("세 자리 정수를 입력하세요. >>");
			int input = scan.nextInt();
			if (input < 100 || 999 < input) {
				System.out.println("알림 ☞ 세자리 정수만 입력해야 합니다.");
				continue;
/*
 * ****	반복문에서의 continue ****
 * while	=> 조건식으로 이동	==> 처음부터 다시 시작한다.
 * for		=> 증가식으로 이동	==> 해당되는 문장을 건너 뛰고 증감식으로 이동한 후 이어서 진행. (특정 출력을 건너 뛰고 그 다음부터 출력)
 */
			} 
/*
 * 			369 / 100 	==> 3
 * 			369 % 100	==> 69 / 10 ==> 6
 * 			369 % 10 	==> 9
 */
			user[0] = input / 100;
			user[1] = (input % 100) / 10;
			user[2] = input % 10;
/*
 * 	2개의 오류 처리를 진행해야 함.
 * 		1. 같은 수인 경우에는 안된다.
 * 		2. 0을 입력하면 안된다 ==> 8진법으로 인식이 되기 때문에
 */
			if (user[0] == user[1] ||
				user[1] == user[2] ||
				user[0] == user[2]) {
				System.out.println("알림 ☞ 중복된 수는 사용할 수 없습니다.");					// 간소화 질문
				continue;	// 다시 입력.
				}
			if (user[0] == 0 || user[1] == 0 || user[2] == 0) {
				System.out.println("알림 ☞ 0은 사용할 수 없습니다.");
			}
			// 정상적으로 입력이 되었다면 힌트를 줍니다.
			int s = 0, b = 0;
			for (int i = 0; i <3; i++) {				// com
				for (int j = 0; j < 3; j++) {			// user
					if (com[i] == user[j]) {
						if (i == j)
							s++;						// 같은 자리면 strike
						else
							b++;						// 다른 자리면 ball
					}	
				}
			}
			System.out.printf("Input Number : %d, Result : %ds - %db\n",
								input, s, b);
			if (s == 3) {
				System.out.println("Game Over !!");
				break;
			}
		}
	}
}

