package com.sist.main;
/*
 * 	1) 	클래스 구성 요소 : 윈도우, 웹, 모바일
 * 		------
 * 		개발자 ==> 설계 ==> 메모리에 저장
 * 				   ----		-----------
 * 				  클래스		인스턴스 / 객체
 * 
 * 		1. 	클래스 설계
 * 			------
 * 			데이터만 관리 (변수 여러 개를 모아서 관리한다.) => 웹, 윈도우, 전송(데이터를 모아서 한 번에 전송한다.) ==> ex) 상세 보기.
 * 			데이터 활용 : 메서드를 여러 개 묶어서 관리 => manager(사용자 요청 시 처리한다.) 
 * 						 --------------------------
 * 									|=> 액션 클래스 (동작을 정의한다.)
 *			데이터 + 메서드 : 혼합
 *			--------------------------- 벤치 마킹 => 요구 사항 기능이 필요하다.	
 *
 *			클래스 설계 내용
 *			--------------
 *			1. 데이터	=> 멤버 변수
 *			2. 기능		=> 메서드
 *			3. 필요시 멤버 변수의 초기화 : 생성자, static{}
 *			---------------------------------------------
 *			멤버 변수의 종류
 *				= 인스턴스 변수	=> Heap =>	메모리 공간을 만듦과 동시에 저장 후 관리.
 *										   	------------------ new 라는 연산자를 이용하며 프로그래머가 관리한다. (new 를 사용하지 않으면 쓸 수 없다.)
 *											=> 메모리를 따로 저장한다 (여러 개가 필요한 경우에 사용 ==> 영화 정보, 회원 정보, 게시물, ...)
 *
 *				= 정적 변수 		=> Method Area => 모든 객체가 공통으로 사용하는 변수 (1개를 가지고 사용한다.)
 *									=> 변수 앞에 static을 붙임. => 변경하면 데이터 값이 동시에 변경된다.
 *									=> 공통으로 사용 되는 변수 값을 지정할 때 사용한다.
 *									=> 데이터 전체를 모아서 관리한다 => 오라쿨 (공유된 데이터)
 *
 *				** 모든 객체의 변수 값을 한 번에 변경, 설정하는 경우 => static
 *				** 변수 =>	값을 저장하여 사용이 가능하게 하는 것
 *						  	-------- 
 *							 초기화
 *				변수의 초기화
 *				=> 인스턴스 초기화 블럭
 *					class A {
 *						int a; 			====> 선언
 *						-------------------------- 선언부 에서는 선언과 동시에 초기화는 가능하지만, 선언 따로, 값 부여 따로는 불가능하다.
 *													int a = 100; // 가능
 *
 *													int a;
 *													a = 100; // 불가능
 *						{
 *							a = 100;	====> 구현 ==> 제어문 / 연산자 / 파일 읽기 ...
 *						}
 *					}
 *				=> 정적 변수 초기화 블럭 ==> static 변수는 주로 초기화 블럭에서 사용	
 *					class A {
 *						static int a = 100;
 *
 *						static
 *						{
 *							a = 100;			====> 명시적인 초기화가 안되는 경우에 사용.
 *														=> 난수 발생, 제어문, 반복문 사용하는 경우, ...
 *						}
 *					}
 *					= 생성자 =======> 가장 많이 사용 ====> 인스턴스
 *						1) 특징 : 모든 클래스는 생성자가 1개 이상 존재하며, 생성자가 없는 경우에는 
 *									컴파일러가 매개 변수가 없는 default 생성자를 자동으로 1개를 추가한다.
 *							
 *							=> 클래스 명과 생성자 명이 동일해야 한다.
 *							=> 리턴 형이 없다.
 *							=> 같은 이름으로 여러 개의 생성자를 만들 수 있다
 *								-----------------------------
 *								(오버로딩 - 중복 메서드 정의)
 *								=> 같은 이름으로 여러 개의 메서드를 만드는 경우
 *									1. 매개 변수의 개수, 데이터 형이 달라야 한다.
 *									2. 리턴 형, 접근 지정어는 관련이 없다.
 *
 *							=> 생성자는 단독으로 호출이 불가능하다. ==> new 생성자()를 통해 호출이 가능하다.
 *						
 *						2) 역할 : 멤버 변수의 초기화
 *							=> 시작과 동시에 처리하는 소스가 있는 경우
 *								=> 화면 UI
 *								=> 카톡 (실행과 동시에 서버 연결이 됨)
 *								=> 데이터 베이스 연결
 *								=> 파일 일기
 *				--------------------------------------------------------------------------------------------------
 *				*** static 메서드 안에서는 static 변수, static 메서드만 사용이 가능하다.
 *						=> 인스턴스 사용을 원하는 경우 new 를 이용해서 메모리 할당 후 사용이 가능하다.
 *				*** 인스턴스 메서드 안에서는 모든 것이 사용 가능하다.
 *
 *				*** class A {
 *						int a = 10;			=> 인스턴스
 *						static int b = 20;	=> 정적
 *							
 *						A()					=> 인스턴스
 *						{
 *							==> a, b, aaa(), bbb() 호출이 가능한 부분
 *						}
 *						void aaa(){		===> 인스턴스
 *							==> a, b, bbb()	=========> 생성자는 호출이 불가능하다.
 *						}
 *						static void bbb(){	=> 정적
 *							==>	b			=========> static은 static 메서드, static 변수만 호출이 가능하다.
 *						}
 *					}
 *				
 * 					
 *
 *
 *
 *
 *
 *
 *
 *		
 */
class Student {
	private String name;
	private String sex;
	private int age;
	
	public Student()
	{
		name = "홍길동";
		sex = "남자";
		age = 20;
	}
	// 사용자로부터 입력 받은 값으로 초기화
	public Student(String n, String s, int a)
	{

		name = n;
		sex = s;
		age = a;
	}
	public Student(String n)
	{
		// 생성자 호출 => this()	=> 첫 줄에 사용해야 한다.
		this();
		name = n;
	}
	public Student(String s, int a)
	{
		this("박문수", s, a); // Student()를 호출 ==> 매개 변수가 없는 메서드를 호출한다.
	}
	public void print() 
	{
		System.out.println("이름 : " + name);
		System.out.println("성별 : " + sex);
		System.out.println("나이 : " + age);
	}
}
class Member
{
	// 생성자가 있으면 default 생성자는 존재하지 않기 때문에 main method에서 매개 변수의 값을 넣어주어야 오류가 발생X
	public Member(String name)
	{
		System.out.println("이름 : " + name);
	}
}
class Sawon 
{
	
}
class Emp
{
	private String name;
	private String dept;
	
	public Emp(String name, String dept) {
		super();
		this.name = name;
		this.dept = dept;
	}
	
	
}
public class 클래스_114p {


	public static void main(String[] args) {
/*
		Student s1 = new Student();
		s1.print();
		
		System.out.println("============= 사용자 입력 ===================");
		
		Student s2 = new Student("심청이", "여자", 20);
		s2.print();
*/
		Student s1 = new Student("박문수");
		s1.print();
		
		System.out.println();
		
		Student s2 = new Student("남자", 30);
		s2.print();
		
		Sawon s = new Sawon();
		//	=> 생성자는 여러 개 만들 수 있다.
		// 클래스 안에서 생성자 호출 시에는 this()를 이용한다
		// this() 반드시 생성자 안에서만 호출해야 하고 => 첫 번째 줄에서 호출해야 하며 => 한 번만 사용이 가능하다.
		
	}

}
