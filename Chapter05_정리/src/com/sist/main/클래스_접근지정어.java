package com.sist.main;
/*
 * 	변수	 / 메서드 / 생성자
 * 	---------------------
 * 	접근 범위
 * 		=> private : 멤버 변수 (데이터를 보호하는 목적)	=> 접근 거부
 * 		=> public  : 다른 클래스 연결					  	=> 접근 승낙
 * 					 메서드 / 클래스 / 생성자
 * 
 * 	라이브러리에서 제공
 * 	접근 지정어는 멤버에서만 사용이 가능하다.
 * 				--- 클래스 영역에 선언
 * 				=============================
 * 				--- 인스턴스 변수, 정적 변수
 * 				--- 메서드
 * 				--- 생성자
 * 				--- 클래스
 * 				=============================
 * 				--- 지역 변수는 접근 지정어를 사용할 수 있다. (메서드 안에서 사용)
 * 					-------- final (접근 지정아, static 은 사용핧 수 없다.)
 * 	-------------------------------------------------------------------
 * 	*** private	: 자신의 클래스에서만 사용이 가능하다 (접근이 금지) => 개인 정보, 회사 정보, ...
 * 					  ------------
 * 					  ** 모든 멤버 변수는 데이터 보호 => private
 * 	-------------------------------------------------------------------
 * 		default	: 같은 패키지에서 접근이 가능 => 키워드가 없는 상태
 * 				class A
 * 				{
 * 					int a; = default
 * 				}
 * 	--------------------------------------------------------------------
 * 		protected	: 같은 패키지에서 접근이 가능 + 상속을 받은 경우 다른 패키지까지 접근이 가능하다.
 * 	--------------------------------------------------------------------
 * 	***	public	: 모든 클래스에서 접근이 가능하게 만든다
 * 				  클래스, 메서드, 인터페이스, 상수, 생성자
 * 	--------------------------------------------------------------------
 * 	
 * 		=>	private < default < protected < public
 * 			--------------------------------------
 * 			   |							   |
 * 			   ---------------------------------
 * 								| 중요하다
 * 
 * 	=>	지역 변수
 * 		--------	final 외의 다른 키워드는 사용이 불가능하다.
 * 					멤버 변수는 기본 초기화 => 바로 사용이 가능하다.
 * 								---------- 프로그램에 필요한 경우에는 초기화 후 사용.
 * 								생성자를 사용하지 않을 수 있고, 초기화 블럭도 사용하지 않을 수 있다.
 * 					지역 변수는 반드시 초기화 후 사용.
 * 					
 * 						모든 멤버 변수 => private 가 필수가 아님 => 권장 사항일 뿐.
 * 	
 * 	=>	메서드 : 기능 수행
 * 
 * 		형식)	
 * 			[접근 지정어] [옵션 지정어] 리턴 형 메서드 명(매개 변수 목록) {
 * 			------------  -----------	
 * 				  |			   |=> static, abstract
 * 				  |				   ---------------- 
 * 				  |=> 다른 클래스와 통신 => public
 * 
 * 				------ 사용자 요청에 대한 처리
 * 				결과 값 전송 ==> return;
 * 			}
 * 
 * 			1. 접근 지정어
 * 				메서드 => 통신 담당 (소프트웨어 => 메시지) => 클래스와 클래스 연결하는 기능 => 모든 클래스에서 사용이 가능하다.
 * 							public
 * 				옵션 => static : 클래스 전체에서 동일한 기능을 가지고 있는 경우 (극히 드물다 => 프로그램에서 1 ~ 2 개 정도)
 * 						웹) 한글 변환, 암호화, 복호화
 * 				리턴 형 => 기본형, 배열, 클래스
 *							 |		|	  |=> 정보 출력 (변수가 여러 개인 경우) => 상세 보기
 * 							 |		|=> 전송하는 데이터가 여러 개 => 목록
 * 							 |=> 데이터 값이 한 개인 경우 => 장바구니의 개수
 * 				메서드 명 : 식별자 => 소문자 시작(가급적이면 => 한글은 사용하지 않는다)
 * 																=> 운영 체제에 따라 한글 자체가 깨지는 경우 많음
 * 				매개 변수 : 여러 개 사용이 가능하다.
 * 							사용자가 보내는 요청 값의 개수를 모를 때 (... << 가변형 데이터 사용)
 * 				** 리턴 형 => 요청에 대한 결과 값
 * 				** 매개 변수 => 사용자가 요청한 값 => 로그인 요청 / 검색어, ...
 * 				** 메서드는 호출시 => 처음부터 끝까지 수행한다.
 * 				----------------------------------------------------------------------------------
 * 		
 * 		호출)	class A {
 * 					public void aaa(){}
 * 					public int bbb(){}
 * 					-------------------------------------- 아직 저장 되지 않음. -----	|
 * 					public static void ccc(){}										|
 * 					public static int ddd(){}	                                	|------ 저장
 * 					-------------------------------------- 저장						|
 * 				}																	|
 * 					A aa = new A();		------------------new를 통해 선언이 되면 -----
 * 
 * 				=>	인스턴스
 *					=> 객체 명. 변수 명, 객체 명. 메서드 명.	 ===> 메모리 주소
 *										------ 메모리 주소를 가지고 있다.
 *
 * 				=>	static
 *					=> 클래스 명. 변수 명, 클래스 명. 메서드 명 ====> 클래스 명 
 * 
 * 
 * 
 * 
 * 
 */
public class 클래스_접근지정어 {

	public static void main(String[] args) {
		

	}

}
