/*
 * 	연산자
 * 		단항연산자
 * 		 = 증감연산자	 (++, --)
 * 		   전치 / 후치
 * 		   ---------------------무조건 1씩 증가
 * 			int a = 10;
 * 			a++;	================>a에 1을 증가
 * 			++a;	================>a에 1을 증가
 * 			연산자가 2개 이상이 있는 경우
 * 			----------------------------------
 * 			a++	:	다른 연산을 수행하고 나중에 증가
 * 			++a	:	먼저 증가한 후에 다른 연산을 수행
 * 
 * 			예)
 * 				int a = 10;
 * 				int b = a ++;
 * 					-----
 * 						  ---	=> b = 10, a = 11
 * 				int a = 10;
 * 				int b = ++a;
 * 						---
 * 					-----		=> b = 11, a = 11
 * 				a ++; ===> 대입 먼저
 * 				++ a; ===> 증가 먼저
 * 				-------------------------------
 * 				==> ++, --	변수값 자체가 변경
 * 							-------------------
 * 				a ++(++ a)	==> a = a + 1	==> a += 1
 * 				a --(-- a)	==> a = a - 1	==> a -= 1
 * 				---------------------------------------	동일한 연산
 * 				=>	반복문에서 주로 사용	=>	게임 (슈팅게임)
 * 				=>	웹(데이터베이스 연동)	
 * 
 * 		 = 부정연산자   (!)	=>	boolean으로만 사용이 가능
 * 							=>	true -> false, false -> true
 * 							=>	조건문, 반복문	(제어문에서 주로 사용)
 * 							boolean bCheck = false;
 * 							!bCheck		=>	true
 * 							6 == 7		=>	true
 * 							!(6 == 7)	=>	false
 * 							=>	예약일	=>	!예약 조건	(예약 일이 아니거나, 결제가 되지 않은 것들은 값을 가져오지 않게끔)
 * 
 * 		 = 형변환연산자	 ((데이터형))
 * 		   ----------------------
 * 			형변환 :	byte / char / int / long / float / double
 * 					-----------------------------------------
 * 				(int)문자		=>	정수
 * 				(double)정수	=>	실수
 * 				(int)실수		=>	정수
 * 				(char)정수	=>	문자
 * 
 * 				1)	묵시적 형변환		==>	자동형변환
 * 						작은 데이터형	==>	큰 데이터형
 * 					--------------------------------연산 처리 / 값 대입
 * 						int i = 'A'
 * 								---- 65로 변경		==> i = 65	:	'A'(char)	=>	'A'라는 문자를 자동으로 int로 변경.
 * 						double d = 	10;
 * 									--
 * 									int ==> d = 10.0 : 10(double)	=>	10이라는 정수를 자동으로 double로 변경.
 * 						10 + 10.5
 * 						--
 * 						10.0
 *						----------- 10.0 + 10.5 : 연산처리는 같은 데이터형끼리만 연산이 가능하므로 10을 10.0으로 자동형변환 후 연산.
 * 
 * 						'A' + 1
 * 						---	 ---
 * 						char int => int가 크다
 * 						----
 * 						int로 변경 => 65 + 1 => 66
 * 
 * 				2)	강제 형변환	==>	큰 데이터형	=>	작은 데이터형으로 변경
 * 						int a = (int)10.5;
 * 								-------
 * 								  10
 * 						a = 10 => 실수 10.5를 정수 10으로 변경 (소수점을 지운다)
 * 
 * 					==>	데이터형의 크기 확인
 * 									<----------------- 강제형변환(명시적)
 * 							byte < char < int < long < float < double
 * 									------------------> 자동형변환(묵시적)
 * 					***연산시 주의점
 * 						1. 데이터형
 * 						2. 프로그램에 필요한 데이터형이 무엇인지 확인
 * 
 * 
 * 
 * 		이항연산자(연산대상 : 피연산자 ==> 2개)
 * 		 = 산술연산자 (+, -, *, /, %)
 * 			+ :
 * 				일반 산술(덧셈)과 문자열 결합이 가능하여 가장 많이 사용된다.
 * 				==> 10 + 10 = 20 ==> (일반 산술)합, 계산기에 많이 사용
 * 				==> "Hello " + "Java" ==> (문자열 결합)"Hello Java"	==> 크롤링, 데이터 저장에 많이 사용.	
 * 
 * 			/ :
 * 				0으로 나눌 수 없다. : 조건을 걸거나 예외 처리를 해야 함.
 * 					Java 					===>	정수 / 정수 = 정수	====>	5 / 2 = 2
 * 					파이썬, 자바스크립트, 오라클	====> 	정수 / 정수 = 실수	====>	5 / 2 = 2.5
 * 
 * 			% :	배수 구하기, 조건
 * 				부호가 왼쪽 부호가 남는다
 * 				+ % +	=>	+
 * 				+ % -	=>	+
 * 				- % -	=>	-
 * 				- % +	=>	-
 * 								******* *, /, %가 +, -보다 우선 순위를 가지고 있어 필요한 경우 ()를 사용하여 우선 순위를 변경해주어야 햔다.
 * 				3 + 5 * 10			
 * 					------		1
 * 				------			2
 * 			
 * 				(3 + 5) * 10
 * 				-------			1
 * 					 -------	2
 * 
 * 				예)
 * 					짝수 =>	a %2 == 0				(짝수)
 * 					홀수 =>	a %2 != 0, a %2 == 1 	(홀수)
 * 							a %3 == 0				(3의 배수)
 * 							a %7 == 0				(7의 배수)
 * 			
 * 		 = 비교연산자 (==, !=, <, >, <=, >=)
 * 			==	: 같다		(JavaScript : ===, Oracle : =)
 * 			!=	: 같지 않다
 * 			<	: 작다
 * 			>	: 크다
 * 			<=	: 작거나 같다	====>	< || ==
 * 			>=	: 크거나 작다	====>	> || ==
 * 			*** 문자 / 숫자(정수, 실수)	:	문자열을 비교할 때는 equals(), !equals(), compare(), 등을 사용한다.
 * 										문자열은 클래스로 되어있기 때문에.
 * 
 * 		 = 논리연산자 (&&, ||)
 * 			&&	==>
 * 			(조건)	&&	(조건)
 * 			----		-----	===> 조건 2개가 true일 경우에 true	===> 나머지는 false
 * 			  l			  l
 * 			  -------------
 * 					l
 * 				  결과 값			===> 범위 포함 대문자 / 소문자
 * 
 * 			||	==>
 * 			(조건)	||	(조건)	
 * 			----		----	===> 조건 중 1개 이상이 true면 true, 1개라도 false가 있으면 false	
 * 			  l			  l
 * 			  -------------
 * 					l
 * 				  결과 값
 * 
 * 			***	효율적인 연산(최적화 연산)
 * 			&&	=>	앞에 있는 조건이 false	=>	뒤에 있는 연산은 하지 않는다.
 * 					------------ false일 확률이 많은 것
 * 			||	=>	앞에 있는 조건이 true	=>	뒤에 있는 연산은 하지 않는다
 * 								 true일 확률이 많은 것.
 * 			프로그램
 * 				1)	기본 문법
 * 					----------	변수 / 데이터형 / 연산자 / 제어문
 * 				2)	묶는 연습
 * 					----------	데이터 묶음	(배열 / 클래스)
 * 					----------	명령문 묶음	(메소드)
 * 					-------------------------------------------- + (클래스)
 * 					=>	데이터형 / 액션(기능 처리)
 * 				3)	재사용 중심
 * 				4) 	퍼포먼트 중심	==>	최적화(속도)
 * 
 * 			=>	자바는 무조건 (true / false)
 * 				true	:	0, 0.0이 아닌 수
 * 				false	:	0, 0.0
 * 			=>	C / C++ / Python / JavaScript	=>	숫자
 * 		--------------------------------------------------if(조건)	==>	true / false
 * 		 = 대입연산자 (=, +=, -=)
 * 			= 대입연산자
 * 				int a = 10;
 * 				a = 10 + 10
 * 					-------	10 + 10 연산
 * 				-----		계산된 결과를 a에 저장.
 * 
 * 			= 복합대입연산자 (연산자가 두 개)
 * 				+=			===> 여러 개 증가, 여려 개 감소.
 * 				++ / --		===> 1개 증가, 1개 감소.
 * 				
 * 				int a = 10;
 * 				a += 10;	===> a = 20
 * 				
 * 				int a = 10;
 * 				a -= 10;	===> a = 0
 * 						
 * 		삼항연산자
 * 		 = (조건) ? 값1 : 값2
 * 		   ----
 * 		   결과값	:	true	=>	값1
 * 					false	=> 	값2
 * 			예)	
 * 				int a = 10;
 * 				a %2 == 0 ? "짝수" : "홀수"
 * 
 * 
 * 
 * 
 * 
 */
public class 연산자_삼항연산자 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		// 자동 형변환
/*		char c = 65;	//	c = 'A'
		int a = 10;
		int b = 55;
		char c1 = (char)(a + b);	//	char에 바로 대입을 하면 묵시적으로 값이 들어가지만 연산이 들어가게 된다면 반드시 명시적 형변환을 해주어야 한다.
*/	
		// 0.0 ~ 0.99 사이의 숫자 중 난수를 만드는 객체 호출, *100하여 0.0 ~ 99.0을 만든 후 int형으로 형변환하여 0 ~ 99 사이의 난수를 생성하는 코드로 변경
		// +1을 하여 1 ~ 100 사이의 난수를 만드는 코드로 변경.
		int num = (int)(Math.random() * 100) + 1;		
		System.out.println("num = " + num);					//	난수의 숫자를 확인하는 출력
		System.out.println(num %2 == 0? "짝수" : "홀수");		//	난수의 숫자가 짝수면 "짝수", 홀수면 "홀수"를 출력.

	}

}
